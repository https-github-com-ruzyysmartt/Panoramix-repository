Create Login from:ruzyysmartt                id:52005723+ruzyysmartt
 email: ruzyysmartt@gmail. com       
 account: github.com/ruzyysmartt         
 https://github.com/ruzyysmartt.gits    
content: panoramix decompile reposentory 
node: json sourse code  
web 3 ABI       
owned : ruzyysmartt  ( news owned contract)  
   
=  true
                                                               
    ##  
 Panoramix JSON output
for easy automated analysis

addr: 0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe
network: mainnet
ver: 26 Apr 2019
problems: {'0x173825d9': 'removeOwner(address _owner)', '0x7065cb48': 'addOwner(address _owner)'}
source: /code/0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe.json
also available through BigQuery

stor_defs:

  [def, "m_required", 0, [mask, 256, 0]]
  [def, "m_numOwners", 1, [mask, 256, 0]]
  [def, "stor2", 2, [array, "struct"]]
  [def, "stor258", 258, [mapping, 256]]
  [def, "stor259", 259, [mapping, "struct"]]
  [def, "stor260", 260, [array, 256]]
  [def, "m_dailyLimit", 261, [mask, 256, 0]]
  [def, "stor262", 262, [mask, 256, 0]]
  [def, "stor263", 263, [mask, 256, 0]]
  [def, "stor264", 264, [mapping, "struct"]]

functions:

  def m_required(): # 0x746c9171 payable
    [return, [stor, 256, 0, [name, "m_required", 0]]], 

  def m_numOwners(): # 0x4123cb6b payable
    [return, [stor, 256, 0, [name, "m_numOwners", 1]]], 

  def m_dailyLimit(): # 0xf1736d86 payable
    [return, [stor, 256, 0, [name, "m_dailyLimit", 261]]], 

  def isOwner(address _owner): # 0x2f54bf6e payable
    [return, [gt, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, [param, "_owner"]], [loc, 258]]], 0]], 

  def _fallback(): # payable
    [if, [le, "callvalue", 0], [
      [stop], 
    ],[
      [log, [data, "caller", "callvalue"], 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c], 
      [stop], 
    ] 

  def hasConfirmed(bytes32 _operation, address _owner): # 0xc2cf7326 payable
    [if, [iszero, [eq, 0, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, [param, "_owner"]], [loc, 258]]]]], [
      [if, [iszero, [eq, 0, [and, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, [param, "_owner"]], [loc, 258]]]], [stor, 256, 256, [map, [param, "_operation"], [loc, 259]]]]]], [
        [return, 1], 
      ],[
        [return, 0], 
      ] 
    ],[
      [return, 0], 
    ] 

  def revoke(bytes32 _operation): # 0xb75c7dc6 payable
    [if, [iszero, [eq, 0, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]]], [
      [if, [le, [and, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [param, "_operation"], [loc, 259]]]], 0], [
        [stop], 
      ],[
        [store, 256, 0, [map, [param, "_operation"], [loc, 259]], [add, 1, [stor, 256, 0, [map, [param, "_operation"], [loc, 259]]]]], 
        [store, 256, 256, [map, [param, "_operation"], [loc, 259]], [add, [stor, 256, 256, [map, [param, "_operation"], [loc, 259]]], [mul, -1, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]]]]], 
        [log, [data, "caller", [param, "_operation"]], 0xc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b], 
        [stop], 
      ] 
    ],[
      [stop], 
    ] 

  def kill(address _to): # 0xcbf0b0c0 payable
    [if, [iszero, [eq, 0, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]]], [
      [if, [iszero, [iszero, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], [
        [if, [iszero, [eq, 0, [and, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]]], [
          [stop], 
        ],[
          [log, [data, "caller", [sha3, [call.data, 0, "calldatasize"]]], 0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda], 
          [if, [gt, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], 1], [
            [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [add, -1, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
            [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [or, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
            [stop], 
          ],[
            [if, [ge, [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], [stor, 256, 0, [length, [loc, 260]]]], [
              [invalid, "jump"], 
            ],[
              [store, 256, 0, [add, [code.data, 3859, 32], [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]], 0], 
              [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
              [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
              [store, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
              [selfdestruct, [param, "_to"]], 
            ] 
          ] 
        ] 
      ],[
        [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [stor, 256, 0, [name, "m_required", 0]]], 
        [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
        [store, 256, 0, [length, [loc, 260]], [add, 1, [stor, 256, 0, [length, [loc, 260]]]]], 
        [if, [gt, [iszero, [stor, 256, 0, [length, [loc, 260]]]], [add, 1, [stor, 256, 0, [length, [loc, 260]]]]], [
          [store, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [stor, 256, 0, [length, [loc, 260]]]], 
          [if, [ge, [stor, 256, 0, [length, [loc, 260]]], [stor, 256, 0, [length, [loc, 260]]]], [
            [invalid, "jump"], 
          ],[
            [store, 256, 0, [add, [code.data, 3859, 32], [stor, 256, 0, [length, [loc, 260]]]], [sha3, [call.data, 0, "calldatasize"]]], 
            [if, [iszero, [eq, 0, [and, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]]], [
              [stop], 
            ],[
              [log, [data, "caller", [sha3, [call.data, 0, "calldatasize"]]], 0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda], 
              [if, [gt, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], 1], [
                [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [add, -1, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
                [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [or, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
                [stop], 
              ],[
                [if, [ge, [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], [stor, 256, 0, [length, [loc, 260]]]], [
                  [invalid, "jump"], 
                ],[
                  [store, 256, 0, [add, [code.data, 3859, 32], [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]], 0], 
                  [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
                  [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
                  [store, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
                  [selfdestruct, [param, "_to"]], 
                ] 
              ] 
            ] 
          ] 
        ],[
          [while, [gt, [stor, 256, 0, [length, [loc, 260]]], [var, 0]], [
            [store, 256, 0, [array, [var, 0], [loc, 260]], 0], 
            [continue, "id2230", [[setvar, 0, [add, 1, [var, 0]]]]], 
          "id2230" , [[setvar, 0, [add, 1, [stor, 256, 0, [length, [loc, 260]]]]]] ], # end of while, setvars here go in front of the loop
          [store, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [stor, 256, 0, [length, [loc, 260]]]], 
          [if, [ge, [stor, 256, 0, [length, [loc, 260]]], [stor, 256, 0, [length, [loc, 260]]]], [
            [invalid, "jump"], 
          ],[
            [store, 256, 0, [add, [code.data, 3859, 32], [stor, 256, 0, [length, [loc, 260]]]], [sha3, [call.data, 0, "calldatasize"]]], 
            [if, [iszero, [eq, 0, [and, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]]], [
              [stop], 
            ],[
              [log, [data, "caller", [sha3, [call.data, 0, "calldatasize"]]], 0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda], 
              [if, [gt, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], 1], [
                [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [add, -1, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
                [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [or, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
                [stop], 
              ],[
                [if, [ge, [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], [stor, 256, 0, [length, [loc, 260]]]], [
                  [invalid, "jump"], 
                ],[
                  [store, 256, 0, [add, [code.data, 3859, 32], [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]], 0], 
                  [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
                  [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
                  [store, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc,Create Login from:ruzyysmartt                id:52005723+ruzyysmartt email: ruzyysmartt@gmail. com                            account: github.com/ruzyysmartt                     https://github.com/ruzyysmartt.gits       content: panoramix decompile reposentory node: json sourse code  web 3 ABI                             owned : ruzyysmartt  ( news owned contract)                                                                        ##                           Panoramix JSON output
for easy automated analysis

addr: 0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe
network: mainnet
ver: 26 Apr 2019
problems: {'0x173825d9': 'removeOwner(address _owner)', '0x7065cb48': 'addOwner(address _owner)'}
source: /code/0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe.json
also available through BigQuery

stor_defs:

  [def, "m_required", 0, [mask, 256, 0]]
  [def, "m_numOwners", 1, [mask, 256, 0]]
  [def, "stor2", 2, [array, "struct"]]
  [def, "stor258", 258, [mapping, 256]]
  [def, "stor259", 259, [mapping, "struct"]]
  [def, "stor260", 260, [array, 256]]
  [def, "m_dailyLimit", 261, [mask, 256, 0]]
  [def, "stor262", 262, [mask, 256, 0]]
  [def, "stor263", 263, [mask, 256, 0]]
  [def, "stor264", 264, [mapping, "struct"]]

functions:

  def m_required(): # 0x746c9171 payable
    [return, [stor, 256, 0, [name, "m_required", 0]]], 

  def m_numOwners(): # 0x4123cb6b payable
    [return, [stor, 256, 0, [name, "m_numOwners", 1]]], 

  def m_dailyLimit(): # 0xf1736d86 payable
    [return, [stor, 256, 0, [name, "m_dailyLimit", 261]]], 

  def isOwner(address _owner): # 0x2f54bf6e payable
    [return, [gt, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, [param, "_owner"]], [loc, 258]]], 0]], 

  def _fallback(): # payable
    [if, [le, "callvalue", 0], [
      [stop], 
    ],[
      [log, [data, "caller", "callvalue"], 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c], 
      [stop], 
    ] 

  def hasConfirmed(bytes32 _operation, address _owner): # 0xc2cf7326 payable
    [if, [iszero, [eq, 0, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, [param, "_owner"]], [loc, 258]]]]], [
      [if, [iszero, [eq, 0, [and, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, [param, "_owner"]], [loc, 258]]]], [stor, 256, 256, [map, [param, "_operation"], [loc, 259]]]]]], [
        [return, 1], 
      ],[
        [return, 0], 
      ] 
    ],[
      [return, 0], 
    ] 

  def revoke(bytes32 _operation): # 0xb75c7dc6 payable
    [if, [iszero, [eq, 0, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]]], [
      [if, [le, [and, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [param, "_operation"], [loc, 259]]]], 0], [
        [stop], 
      ],[
        [store, 256, 0, [map, [param, "_operation"], [loc, 259]], [add, 1, [stor, 256, 0, [map, [param, "_operation"], [loc, 259]]]]], 
        [store, 256, 256, [map, [param, "_operation"], [loc, 259]], [add, [stor, 256, 256, [map, [param, "_operation"], [loc, 259]]], [mul, -1, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]]]]], 
        [log, [data, "caller", [param, "_operation"]], 0xc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b], 
        [stop], 
      ] 
    ],[
      [stop], 
    ] 

  def kill(address _to): # 0xcbf0b0c0 payable
    [if, [iszero, [eq, 0, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]]], [
      [if, [iszero, [iszero, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], [
        [if, [iszero, [eq, 0, [and, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]]], [
          [stop], 
        ],[
          [log, [data, "caller", [sha3, [call.data, 0, "calldatasize"]]], 0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda], 
          [if, [gt, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], 1], [
            [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [add, -1, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
            [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [or, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
            [stop], 
          ],[
            [if, [ge, [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], [stor, 256, 0, [length, [loc, 260]]]], [
              [invalid, "jump"], 
            ],[
              [store, 256, 0, [add, [code.data, 3859, 32], [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]], 0], 
              [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
              [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
              [store, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
              [selfdestruct, [param, "_to"]], 
            ] 
          ] 
        ] 
      ],[
        [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [stor, 256, 0, [name, "m_required", 0]]], 
        [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
        [store, 256, 0, [length, [loc, 260]], [add, 1, [stor, 256, 0, [length, [loc, 260]]]]], 
        [if, [gt, [iszero, [stor, 256, 0, [length, [loc, 260]]]], [add, 1, [stor, 256, 0, [length, [loc, 260]]]]], [
          [store, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [stor, 256, 0, [length, [loc, 260]]]], 
          [if, [ge, [stor, 256, 0, [length, [loc, 260]]], [stor, 256, 0, [length, [loc, 260]]]], [
            [invalid, "jump"], 
          ],[
            [store, 256, 0, [add, [code.data, 3859, 32], [stor, 256, 0, [length, [loc, 260]]]], [sha3, [call.data, 0, "calldatasize"]]], 
            [if, [iszero, [eq, 0, [and, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]]], [
              [stop], 
            ],[
              [log, [data, "caller", [sha3, [call.data, 0, "calldatasize"]]], 0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda], 
              [if, [gt, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], 1], [
                [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [add, -1, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
                [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [or, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
                [stop], 
              ],[
                [if, [ge, [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], [stor, 256, 0, [length, [loc, 260]]]], [
                  [invalid, "jump"], 
                ],[
                  [store, 256, 0, [add, [code.data, 3859, 32], [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]], 0], 
                  [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
                  [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
                  [store, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
                  [selfdestruct, [param, "_to"]], 
                ] 
              ] 
            ] 
          ] 
        ],[
          [while, [gt, [stor, 256, 0, [length, [loc, 260]]], [var, 0]], [
            [store, 256, 0, [array, [var, 0], [loc, 260]], 0], 
            [continue, "id2230", [[setvar, 0, [add, 1, [var, 0]]]]], 
          "id2230" , [[setvar, 0, [add, 1, [stor, 256, 0, [length, [loc, 260]]]]]] ], # end of while, setvars here go in front of the loop
          [store, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [stor, 256, 0, [length, [loc, 260]]]], 
          [if, [ge, [stor, 256, 0, [length, [loc, 260]]], [stor, 256, 0, [length, [loc, 260]]]], [
            [invalid, "jump"], 
          ],[
            [store, 256, 0, [add, [code.data, 3859, 32], [stor, 256, 0, [length, [loc, 260]]]], [sha3, [call.data, 0, "calldatasize"]]], 
            [if, [iszero, [eq, 0, [and, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]]], [
              [stop], 
            ],[
              [log, [data, "caller", [sha3, [call.data, 0, "calldatasize"]]], 0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda], 
              [if, [gt, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], 1], [
                [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [add, -1, [stor, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
                [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], [or, [exp, 2, [stor, 256, 0, [map, [mask_shl, 160, 0, 96, "caller"], [loc, 258]]]], [stor, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]]], 
                [stop], 
              ],[
                [if, [ge, [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]], [stor, 256, 0, [length, [loc, 260]]]], [
                  [invalid, "jump"], 
                ],[
                  [store, 256, 0, [add, [code.data, 3859, 32], [stor, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]]]], 0], 
                  [store, 256, 0, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
                  [store, 256, 256, [map, [data, [call.data, 0, "calldatasize"]], [loc, 259]], 0], 
                  [store, 256, 512, [map, [data, [call.data, 0, "calldatasize"]], [loc,                                                                                         ,Panoramix ASM output

0x0 push1 0x60
0x2 push1 0x40
0x4 mstore 
0x5 calldatasize 
0x6 iszero 
0x7 push2 0xb9
0xa jumpi 
0xb push1 0xe0
0xd push1 0x2
0xf exp 
0x10 push1 0x0
0x12 calldataload 
0x13 div 
0x14 push4 0x173825d9
0x19 dup2 
0x1a eq 
0x1b push2 0x10b
0x1e jumpi 
0x1f dup1 
0x20 push4 0x2f54bf6e
0x25 eq 
0x26 push2 0x15b
0x29 jumpi 
0x2a dup1 
0x2b push4 0x4123cb6b
0x30 eq 
0x31 push2 0x183
0x34 jumpi 
0x35 dup1 
0x36 push4 0x5c52c2f5
0x3b eq 
0x3c push2 0x18c
0x3f jumpi 
0x40 dup1 
0x41 push4 0x7065cb48
0x46 eq 
0x47 push2 0x1b2
0x4a jumpi 
0x4b dup1 
0x4c push4 0x746c9171
0x51 eq 
0x52 push2 0x1db
0x55 jumpi 
0x56 dup1 
0x57 push4 0x797af627
0x5c eq 
0x5d push2 0x1e4
0x60 jumpi 
0x61 dup1 
0x62 push4 0xb20d30a9
0x67 eq 
0x68 push2 0x1f7
0x6b jumpi 
0x6c dup1 
0x6d push4 0xb61d27f6
0x72 eq 
0x73 push2 0x220
0x76 jumpi 
0x77 dup1 
0x78 push4 0xb75c7dc6
0x7d eq 
0x7e push2 0x241
0x81 jumpi 
0x82 dup1 
0x83 push4 0xba51a6df
0x88 eq 
0x89 push2 0x270
0x8c jumpi 
0x8d dup1 
0x8e push4 0xc2cf7326
0x93 eq 
0x94 push2 0x299
0x97 jumpi 
0x98 dup1 
0x99 push4 0xcbf0b0c0
0x9e eq 
0x9f push2 0x2d7
0xa2 jumpi 
0xa3 dup1 
0xa4 push4 0xf00d4b5d
0xa9 eq 
0xaa push2 0x300
0xad jumpi 
0xae dup1 
0xaf push4 0xf1736d86
0xb4 eq 
0xb5 push2 0x32e
0xb8 jumpi 
0xb9 jumpdest 
0xba push2 0x338
0xbd push1 0x0
0xbf callvalue 
0xc0 gt 
0xc1 iszero 
0xc2 push2 0x109
0xc5 jumpi 
0xc6 push1 0x40
0xc8 dup1 
0xc9 mload 
0xca push1 0x1
0xcc push1 0xa0
0xce push1 0x2
0xd0 exp 
0xd1 sub 
0xd2 caller 
0xd3 and 
0xd4 dup2 
0xd5 mstore 
0xd6 callvalue 
0xd7 push1 0x20
0xd9 dup3 
0xda add 
0xdb mstore 
0xdc dup2 
0xdd mload 
0xde push32 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c
0xff swap3 
0x100 swap2 
0x101 dup2 
0x102 swap1 
0x103 sub 
0x104 swap1 
0x105 swap2 
0x106 add 
0x107 swap1 
0x108 log1 
0x109 jumpdest 
0x10a jump 
0x10b jumpdest 
0x10c push2 0x338
0x10f push1 0x4
0x111 calldataload 
0x112 push1 0x0
0x114 push1 0x0
0x116 calldatasize 
0x117 push1 0x40
0x119 mload 
0x11a dup1 
0x11b dup4 
0x11c dup4 
0x11d dup1 
0x11e dup3 
0x11f dup5 
0x120 calldatacopy 
0x121 pop 
0x122 pop 
0x123 pop 
0x124 swap1 
0x125 dup2 
0x126 add 
0x127 dup2 
0x128 swap1 
0x129 sub 
0x12a swap1 
0x12b sha3 
0x12c swap1 
0x12d pop 
0x12e push2 0x63d
0x131 dup2 
0x132 jumpdest 
0x133 push1 0x1
0x135 push1 0xa0
0x137 push1 0x2
0x139 exp 
0x13a sub 
0x13b caller 
0x13c and 
0x13d push1 0x0
0x13f swap1 
0x140 dup2 
0x141 mstore 
0x142 push2 0x102
0x145 push1 0x20
0x147 mstore 
0x148 push1 0x40
0x14a dup2 
0x14b sha3 
0x14c sload 
0x14d dup2 
0x14e dup1 
0x14f dup3 
0x150 dup2 
0x151 eq 
0x152 iszero 
0x153 push2 0xbb3
0x156 jumpi 
0x157 push2 0xd0b
0x15a jump 
0x15b jumpdest 
0x15c push2 0x33a
0x15f push1 0x4
0x161 calldataload 
0x162 jumpdest 
0x163 push1 0x1
0x165 push1 0xa0
0x167 push1 0x2
0x169 exp 
0x16a sub 
0x16b dup2 
0x16c and 
0x16d push1 0x0
0x16f swap1 
0x170 dup2 
0x171 mstore 
0x172 push2 0x102
0x175 push1 0x20
0x177 mstore 
0x178 push1 0x40
0x17a dup2 
0x17b sha3 
0x17c sload 
0x17d gt 
0x17e jumpdest 
0x17f swap2 
0x180 swap1 
0x181 pop 
0x182 jump 
0x183 jumpdest 
0x184 push2 0x33a
0x187 push1 0x1
0x189 sload 
0x18a dup2 
0x18b jump 
0x18c jumpdest 
0x18d push2 0x338
0x190 push1 0x0
0x192 calldatasize 
0x193 push1 0x40
0x195 mload 
0x196 dup1 
0x197 dup4 
0x198 dup4 
0x199 dup1 
0x19a dup3 
0x19b dup5 
0x19c calldatacopy 
0x19d pop 
0x19e pop 
0x19f pop 
0x1a0 swap1 
0x1a1 dup2 
0x1a2 add 
0x1a3 dup2 
0x1a4 swap1 
0x1a5 sub 
0x1a6 swap1 
0x1a7 sha3 
0x1a8 swap1 
0x1a9 pop 
0x1aa push2 0x78e
0x1ad dup2 
0x1ae push2 0x132
0x1b1 jump 
0x1b2 jumpdest 
0x1b3 push2 0x338
0x1b6 push1 0x4
0x1b8 calldataload 
0x1b9 push1 0x0
0x1bb calldatasize 
0x1bc push1 0x40
0x1be mload 
0x1bf dup1 
0x1c0 dup4 
0x1c1 dup4 
0x1c2 dup1 
0x1c3 dup3 
0x1c4 dup5 
0x1c5 calldatacopy 
0x1c6 pop 
0x1c7 pop 
0x1c8 pop 
0x1c9 swap1 
0x1ca dup2 
0x1cb add 
0x1cc dup2 
0x1cd swap1 
0x1ce sub 
0x1cf swap1 
0x1d0 sha3 
0x1d1 swap1 
0x1d2 pop 
0x1d3 push2 0x5b5
0x1d6 dup2 
0x1d7 push2 0x132
0x1da jump 
0x1db jumpdest 
0x1dc push2 0x33a
0x1df push1 0x0
0x1e1 sload 
0x1e2 dup2 
0x1e3 jump 
0x1e4 jumpdest 
0x1e5 push2 0x33a
0x1e8 push1 0x4
0x1ea calldataload 
0x1eb jumpdest 
0x1ec push1 0x0
0x1ee dup2 
0x1ef push2 0x9f1
0x1f2 dup2 
0x1f3 push2 0x132
0x1f6 jump 
0x1f7 jumpdest 
0x1f8 push2 0x338
0x1fb push1 0x4
0x1fd calldataload 
0x1fe push1 0x0
0x200 calldatasize 
0x201 push1 0x40
0x203 mload 
0x204 dup1 
0x205 dup4 
0x206 dup4 
0x207 dup1 
0x208 dup3 
0x209 dup5 
0x20a calldatacopy 
0x20b pop 
0x20c pop 
0x20d pop 
0x20e swap1 
0x20f dup2 
0x210 add 
0x211 dup2 
0x212 swap1 
0x213 sub 
0x214 swap1 
0x215 sha3 
0x216 swap1 
0x217 pop 
0x218 push2 0x782
0x21b dup2 
0x21c push2 0x132
0x21f jump 
0x220 jumpdest 
0x221 push2 0x33a
0x224 push1 0x4
0x226 dup1 
0x227 calldataload 
0x228 swap1 
0x229 push1 0x24
0x22b dup1 
0x22c calldataload 
0x22d swap2 
0x22e push1 0x44
0x230 calldataload 
0x231 swap2 
0x232 dup3 
0x233 add 
0x234 swap2 
0x235 add 
0x236 calldataload 
0x237 push1 0x0
0x239 push2 0x7ad
0x23c caller 
0x23d push2 0x162
0x240 jump 
0x241 jumpdest 
0x242 push2 0x338
0x245 push1 0x4
0x247 calldataload 
0x248 push1 0x1
0x24a push1 0xa0
0x24c push1 0x2
0x24e exp 
0x24f sub 
0x250 caller 
0x251 and 
0x252 push1 0x0
0x254 swap1 
0x255 dup2 
0x256 mstore 
0x257 push2 0x102
0x25a push1 0x20
0x25c mstore 
0x25d push1 0x40
0x25f dup2 
0x260 sha3 
0x261 sload 
0x262 swap1 
0x263 dup1 
0x264 dup3 
0x265 dup2 
0x266 eq 
0x267 iszero 
0x268 push2 0x34c
0x26b jumpi 
0x26c push2 0x3cb
0x26f jump 
0x270 jumpdest 
0x271 push2 0x338
0x274 push1 0x4
0x276 calldataload 
0x277 push1 0x0
0x279 calldatasize 
0x27a push1 0x40
0x27c mload 
0x27d dup1 
0x27e dup4 
0x27f dup4 
0x280 dup1 
0x281 dup3 
0x282 dup5 
0x283 calldatacopy 
0x284 pop 
0x285 pop 
0x286 pop 
0x287 swap1 
0x288 dup2 
0x289 add 
0x28a dup2 
0x28b swap1 
0x28c sub 
0x28d swap1 
0x28e sha3 
0x28f swap1 
0x290 pop 
0x291 push2 0x6fc
0x294 dup2 
0x295 push2 0x132
0x298 jump 
0x299 jumpdest 
0x29a push2 0x33a
0x29d push1 0x4
0x29f calldataload 
0x2a0 push1 0x24
0x2a2 calldataload 
0x2a3 push1 0x0
0x2a5 dup3 
0x2a6 dup2 
0x2a7 mstore 
0x2a8 push2 0x103
0x2ab push1 0x20
0x2ad swap1 
0x2ae dup2 
0x2af mstore 
0x2b0 push1 0x40
0x2b2 dup1 
0x2b3 dup4 
0x2b4 sha3 
0x2b5 push1 0x1
0x2b7 push1 0xa0
0x2b9 push1 0x2
0x2bb exp 
0x2bc sub 
0x2bd dup6 
0x2be and 
0x2bf dup5 
0x2c0 mstore 
0x2c1 push2 0x102
0x2c4 swap1 
0x2c5 swap3 
0x2c6 mstore 
0x2c7 dup3 
0x2c8 sha3 
0x2c9 sload 
0x2ca dup3 
0x2cb dup2 
0x2cc dup2 
0x2cd eq 
0x2ce iszero 
0x2cf push2 0x755
0x2d2 jumpi 
0x2d3 push2 0x779
0x2d6 jump 
0x2d7 jumpdest 
0x2d8 push2 0x338
0x2db push1 0x4
0x2dd calldataload 
0x2de push1 0x0
0x2e0 calldatasize 
0x2e1 push1 0x40
0x2e3 mload 
0x2e4 dup1 
0x2e5 dup4 
0x2e6 dup4 
0x2e7 dup1 
0x2e8 dup3 
0x2e9 dup5 
0x2ea calldatacopy 
0x2eb pop 
0x2ec pop 
0x2ed pop 
0x2ee swap1 
0x2ef dup2 
0x2f0 add 
0x2f1 dup2 
0x2f2 swap1 
0x2f3 sub 
0x2f4 swap1 
0x2f5 sha3 
0x2f6 swap1 
0x2f7 pop 
0x2f8 push2 0x79c
0x2fb dup2 
0x2fc push2 0x132
0x2ff jump 
0x300 jumpdest 
0x301 push2 0x338
0x304 push1 0x4
0x306 calldataload 
0x307 push1 0x24
0x309 calldataload 
0x30a push1 0x0
0x30c push1 0x0
0x30e calldatasize 
0x30f push1 0x40
0x311 mload 
0x312 dup1 
0x313 dup4 
0x314 dup4 
0x315 dup1 
0x316 dup3 
0x317 dup5 
0x318 calldatacopy 
0x319 pop 
0x31a pop 
0x31b pop 
0x31c swap1 
0x31d dup2 
0x31e add 
0x31f dup2 
0x320 swap1 
0x321 sub 
0x322 swap1 
0x323 sha3 
0x324 swap1 
0x325 pop 
0x326 push2 0x456
0x329 dup2 
0x32a push2 0x132
0x32d jump 
0x32e jumpdest 
0x32f push2 0x33a
0x332 push2 0x105
0x335 sload 
0x336 dup2 
0x337 jump 
0x338 jumpdest 
0x339 stop 
0x33a jumpdest 
0x33b push1 0x40
0x33d dup1 
0x33e mload 
0x33f swap2 
0x340 dup3 
0x341 mstore 
0x342 mload 
0x343 swap1 
0x344 dup2 
0x345 swap1 
0x346 sub 
0x347 push1 0x20
0x349 add 
0x34a swap1 
0x34b return 
0x34c jumpdest 
0x34d pop 
0x34e pop 
0x34f push1 0x0
0x351 dup3 
0x352 dup2 
0x353 mstore 
0x354 push2 0x103
0x357 push1 0x20
0x359 mstore 
0x35a push1 0x40
0x35c dup2 
0x35d sha3 
0x35e push1 0x1
0x360 dup2 
0x361 add 
0x362 sload 
0x363 push1 0x2
0x365 dup5 
0x366 swap1 
0x367 exp 
0x368 swap3 
0x369 swap1 
0x36a dup4 
0x36b and 
0x36c gt 
0x36d iszero 
0x36e push2 0x3cb
0x371 jumpi 
0x372 dup1 
0x373 sload 
0x374 push1 0x1
0x376 dup3 
0x377 dup2 
0x378 add 
0x379 dup1 
0x37a sload 
0x37b swap3 
0x37c swap1 
0x37d swap2 
0x37e add 
0x37f dup4 
0x380 store 
0x381 swap1 
0x382 dup4 
0x383 swap1 
0x384 sub 
0x385 swap1 
0x386 store 
0x387 push1 0x40
0x389 dup1 
0x38a mload 
0x38b push1 0x1
0x38d push1 0xa0
0x38f push1 0x2
0x391 exp 
0x392 sub 
0x393 caller 
0x394 and 
0x395 dup2 
0x396 mstore 
0x397 push1 0x20
0x399 dup2 
0x39a add 
0x39b dup7 
0x39c swap1 
0x39d mstore 
0x39e dup2 
0x39f mload 
0x3a0 push32 0xc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b
0x3c1 swap3 
0x3c2 swap2 
0x3c3 dup2 
0x3c4 swap1 
0x3c5 sub 
0x3c6 swap1 
0x3c7 swap2 
0x3c8 add 
0x3c9 swap1 
0x3ca log1 
0x3cb jumpdest 
0x3cc pop 
0x3cd pop 
0x3ce pop 
0x3cf pop 
0x3d0 jump 
0x3d1 jumpdest 
0x3d2 push1 0x1
0x3d4 push1 0xa0
0x3d6 push1 0x2
0x3d8 exp 
0x3d9 sub 
0x3da dup4 
0x3db and 
0x3dc push1 0x2
0x3de dup4 
0x3df push2 0x100
0x3e2 dup2 
0x3e3 lt 
0x3e4 iszero 
0x3e5 push2 0x2
0x3e8 jumpi 
0x3e9 pop 
0x3ea dup4 
0x3eb add 
0x3ec dup2 
0x3ed swap1 
0x3ee store 
0x3ef push1 0x1
0x3f1 push1 0xa0
0x3f3 push1 0x2
0x3f5 exp 
0x3f6 sub 
0x3f7 dup6 
0x3f8 and 
0x3f9 push1 0x0
0x3fb dup2 
0x3fc dup2 
0x3fd mstore 
0x3fe push2 0x102
0x401 push1 0x20
0x403 swap1 
0x404 dup2 
0x405 mstore 
0x406 push1 0x40
0x408 dup1 
0x409 dup4 
0x40a sha3 
0x40b dup4 
0x40c swap1 
0x40d store 
0x40e dup5 
0x40f dup4 
0x410 mstore 
0x411 swap2 
0x412 dup3 
0x413 swap1 
0x414 sha3 
0x415 dup7 
0x416 swap1 
0x417 store 
0x418 dup2 
0x419 mload 
0x41a swap3 
0x41b dup4 
0x41c mstore 
0x41d dup3 
0x41e add 
0x41f swap3 
0x420 swap1 
0x421 swap3 
0x422 mstore 
0x423 dup2 
0x424 mload 
0x425 push32 0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c
0x446 swap3 
0x447 swap2 
0x448 dup2 
0x449 swap1 
0x44a sub 
0x44b swap1 
0x44c swap2 
0x44d add 
0x44e swap1 
0x44f log1 
0x450 pop 
0x451 jumpdest 
0x452 pop 
0x453 pop 
0x454 pop 
0x455 jump 
0x456 jumpdest 
0x457 iszero 
0x458 push2 0x3cb
0x45b jumpi 
0x45c push2 0x464
0x45f dup4 
0x460 push2 0x162
0x463 jump 
0x464 jumpdest 
0x465 iszero 
0x466 push2 0x46f
0x469 jumpi 
0x46a pop 
0x46b push2 0x451
0x46e jump 
0x46f jumpdest 
0x470 push1 0x1
0x472 push1 0xa0
0x474 push1 0x2
0x476 exp 
0x477 sub 
0x478 dup5 
0x479 and 
0x47a push1 0x0
0x47c swap1 
0x47d dup2 
0x47e mstore 
0x47f push2 0x102
0x482 push1 0x20
0x484 mstore 
0x485 push1 0x40
0x487 dup2 
0x488 sha3 
0x489 sload 
0x48a swap3 
0x48b pop 
0x48c dup3 
0x48d eq 
0x48e iszero 
0x48f push2 0x498
0x492 jumpi 
0x493 pop 
0x494 push2 0x451
0x497 jump 
0x498 jumpdest 
0x499 push2 0x3d1
0x49c jumpdest 
0x49d push2 0x104
0x4a0 sload 
0x4a1 push1 0x0
0x4a3 jumpdest 
0x4a4 dup2 
0x4a5 dup2 
0x4a6 lt 
0x4a7 iszero 
0x4a8 push2 0xe58
0x4ab jumpi 
0x4ac push2 0x104
0x4af dup1 
0x4b0 sload 
0x4b1 push2 0x108
0x4b4 swap2 
0x4b5 push1 0x0
0x4b7 swap2 
0x4b8 dup5 
0x4b9 swap1 
0x4ba dup2 
0x4bb lt 
0x4bc iszero 
0x4bd push2 0x2
0x4c0 jumpi 
0x4c1 push1 0x0
0x4c3 dup1 
0x4c4 mload 
0x4c5 push1 0x20
0x4c7 push2 0xf13
0x4ca dup4 
0x4cb codecopy 
0x4cc dup2 
0x4cd mload 
0x4ce swap2 
0x4cf mstore 
0x4d0 add 
0x4d1 sload 
0x4d2 dup3 
0x4d3 mstore 
0x4d4 pop 
0x4d5 push1 0x20
0x4d7 swap2 
0x4d8 dup3 
0x4d9 mstore 
0x4da push1 0x40
0x4dc dup2 
0x4dd sha3 
0x4de dup1 
0x4df sload 
0x4e0 push1 0x1
0x4e2 push1 0xa0
0x4e4 push1 0x2
0x4e6 exp 
0x4e7 sub 
0x4e8 not 
0x4e9 and 
0x4ea dup2 
0x4eb store 
0x4ec push1 0x1
0x4ee dup2 
0x4ef add 
0x4f0 dup3 
0x4f1 swap1 
0x4f2 store 
0x4f3 push1 0x2
0x4f5 dup2 
0x4f6 add 
0x4f7 dup1 
0x4f8 sload 
0x4f9 dup4 
0x4fa dup3 
0x4fb store 
0x4fc swap1 
0x4fd dup4 
0x4fe mstore 
0x4ff dup4 
0x500 dup4 
0x501 sha3 
0x502 swap2 
0x503 swap4 
0x504 push2 0xedd
0x507 swap3 
0x508 push1 0x1f
0x50a swap3 
0x50b swap1 
0x50c swap3 
0x50d add 
0x50e div 
0x50f dup2 
0x510 add 
0x511 swap1 
0x512 push2 0x9d9
0x515 jump 
0x516 jumpdest 
0x517 push1 0x1
0x519 dup1 
0x51a sload 
0x51b dup2 
0x51c add 
0x51d swap1 
0x51e dup2 
0x51f swap1 
0x520 store 
0x521 push1 0x1
0x523 push1 0xa0
0x525 push1 0x2
0x527 exp 
0x528 sub 
0x529 dup4 
0x52a and 
0x52b swap1 
0x52c push1 0x2
0x52e swap1 
0x52f push2 0x100
0x532 dup2 
0x533 lt 
0x534 iszero 
0x535 push2 0x2
0x538 jumpi 
0x539 swap1 
0x53a swap1 
0x53b add 
0x53c push1 0x0
0x53e pop 
0x53f dup2 
0x540 swap1 
0x541 store 
0x542 pop 
0x543 push1 0x1
0x545 push1 0x0
0x547 pop 
0x548 sload 
0x549 push2 0x102
0x54c push1 0x0
0x54e pop 
0x54f push1 0x0
0x551 dup5 
0x552 push1 0x1
0x554 push1 0xa0
0x556 push1 0x2
0x558 exp 
0x559 sub 
0x55a and 
0x55b dup2 
0x55c mstore 
0x55d push1 0x20
0x55f add 
0x560 swap1 
0x561 dup2 
0x562 mstore 
0x563 push1 0x20
0x565 add 
0x566 push1 0x0
0x568 sha3 
0x569 push1 0x0
0x56b pop 
0x56c dup2 
0x56d swap1 
0x56e store 
0x56f pop 
0x570 push32 0x994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c3
0x591 dup3 
0x592 push1 0x40
0x594 mload 
0x595 dup1 
0x596 dup3 
0x597 push1 0x1
0x599 push1 0xa0
0x59b push1 0x2
0x59d exp 
0x59e sub 
0x59f and 
0x5a0 dup2 
0x5a1 mstore 
0x5a2 push1 0x20
0x5a4 add 
0x5a5 swap2 
0x5a6 pop 
0x5a7 pop 
0x5a8 push1 0x40
0x5aa mload 
0x5ab dup1 
0x5ac swap2 
0x5ad sub 
0x5ae swap1 
0x5af log1 
0x5b0 jumpdest 
0x5b1 pop 
0x5b2 jumpdest 
0x5b3 pop 
0x5b4 jump 
0x5b5 jumpdest 
0x5b6 iszero 
0x5b7 push2 0x5b0
0x5ba jumpi 
0x5bb push2 0x5c3
0x5be dup3 
0x5bf push2 0x162
0x5c2 jump 
0x5c3 jumpdest 
0x5c4 iszero 
0x5c5 push2 0x5ce
0x5c8 jumpi 
0x5c9 pop 
0x5ca push2 0x5b2
0x5cd jump 
0x5ce jumpdest 
0x5cf push2 0x5d6
0x5d2 push2 0x49c
0x5d5 jump 
0x5d6 jumpdest 
0x5d7 push1 0x1
0x5d9 sload 
0x5da push1 0xfa
0x5dc swap1 
0x5dd lt 
0x5de push2 0x5eb
0x5e1 jumpi 
0x5e2 push2 0x5e9
0x5e5 push2 0x600
0x5e8 jump 
0x5e9 jumpdest 
0x5ea pop 
0x5eb jumpdest 
0x5ec push1 0x1
0x5ee sload 
0x5ef push1 0xfa
0x5f1 swap1 
0x5f2 lt 
0x5f3 push2 0x516
0x5f6 jumpi 
0x5f7 pop 
0x5f8 push2 0x5b2
0x5fb jump 
0x5fc jumpdest 
0x5fd push2 0x6ba
0x600 jumpdest 
0x601 push1 0x0
0x603 push1 0x1
0x605 jumpdest 
0x606 push1 0x1
0x608 sload 
0x609 dup2 
0x60a lt 
0x60b iszero 
0x60c push2 0x9ed
0x60f jumpi 
0x610 jumpdest 
0x611 push1 0x1
0x613 sload 
0x614 dup2 
0x615 lt 
0x616 dup1 
0x617 iszero 
0x618 push2 0x630
0x61b jumpi 
0x61c pop 
0x61d push1 0x2
0x61f dup2 
0x620 push2 0x100
0x623 dup2 
0x624 lt 
0x625 iszero 
0x626 push2 0x2
0x629 jumpi 
0x62a add 
0x62b sload 
0x62c push1 0x0
0x62e eq 
0x62f iszero 
0x630 jumpdest 
0x631 iszero 
0x632 push2 0xd13
0x635 jumpi 
0x636 push1 0x1
0x638 add 
0x639 push2 0x610
0x63c jump 
0x63d jumpdest 
0x63e iszero 
0x63f push2 0x451
0x642 jumpi 
0x643 push1 0x1
0x645 push1 0xa0
0x647 push1 0x2
0x649 exp 
0x64a sub 
0x64b dup4 
0x64c and 
0x64d push1 0x0
0x64f swap1 
0x650 dup2 
0x651 mstore 
0x652 push2 0x102
0x655 push1 0x20
0x657 mstore 
0x658 push1 0x40
0x65a dup2 
0x65b sha3 
0x65c sload 
0x65d swap3 
0x65e pop 
0x65f dup3 
0x660 eq 
0x661 iszero 
0x662 push2 0x66b
0x665 jumpi 
0x666 pop 
0x667 push2 0x5b0
0x66a jump 
0x66b jumpdest 
0x66c push1 0x1
0x66e push1 0x1
0x670 push1 0x0
0x672 pop 
0x673 sload 
0x674 sub 
0x675 push1 0x0
0x677 push1 0x0
0x679 pop 
0x67a sload 
0x67b gt 
0x67c iszero 
0x67d push2 0x686
0x680 jumpi 
0x681 pop 
0x682 push2 0x5b0
0x685 jump 
0x686 jumpdest 
0x687 push1 0x0
0x689 push1 0x2
0x68b dup4 
0x68c push2 0x100
0x68f dup2 
0x690 lt 
0x691 iszero 
0x692 push2 0x2
0x695 jumpi 
0x696 pop 
0x697 dup4 
0x698 add 
0x699 dup2 
0x69a swap1 
0x69b store 
0x69c push1 0x1
0x69e push1 0xa0
0x6a0 push1 0x2
0x6a2 exp 
0x6a3 sub 
0x6a4 dup5 
0x6a5 and 
0x6a6 dup2 
0x6a7 mstore 
0x6a8 push2 0x102
0x6ab push1 0x20
0x6ad mstore 
0x6ae push1 0x40
0x6b0 dup2 
0x6b1 sha3 
0x6b2 store 
0x6b3 push2 0x5fc
0x6b6 push2 0x49c
0x6b9 jump 
0x6ba jumpdest 
0x6bb pop 
0x6bc push1 0x40
0x6be dup1 
0x6bf mload 
0x6c0 push1 0x1
0x6c2 push1 0xa0
0x6c4 push1 0x2
0x6c6 exp 
0x6c7 sub 
0x6c8 dup6 
0x6c9 and 
0x6ca dup2 
0x6cb mstore 
0x6cc swap1 
0x6cd mload 
0x6ce push32 0x58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da
0x6ef swap2 
0x6f0 dup2 
0x6f1 swap1 
0x6f2 sub 
0x6f3 push1 0x20
0x6f5 add 
0x6f6 swap1 
0x6f7 log1 
0x6f8 pop 
0x6f9 pop 
0x6fa pop 
0x6fb jump 
0x6fc jumpdest 
0x6fd iszero 
0x6fe push2 0x5b0
0x701 jumpi 
0x702 push1 0x1
0x704 sload 
0x705 dup3 
0x706 gt 
0x707 iszero 
0x708 push2 0x711
0x70b jumpi 
0x70c pop 
0x70d push2 0x5b2
0x710 jump 
0x711 jumpdest 
0x712 push1 0x0
0x714 dup3 
0x715 swap1 
0x716 store 
0x717 push2 0x71e
0x71a push2 0x49c
0x71d jump 
0x71e jumpdest 
0x71f push1 0x40
0x721 dup1 
0x722 mload 
0x723 dup4 
0x724 dup2 
0x725 mstore 
0x726 swap1 
0x727 mload 
0x728 push32 0xacbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da
0x749 swap2 
0x74a dup2 
0x74b swap1 
0x74c sub 
0x74d push1 0x20
0x74f add 
0x750 swap1 
0x751 log1 
0x752 pop 
0x753 pop 
0x754 jump 
0x755 jumpdest 
0x756 pop 
0x757 push1 0x1
0x759 dup3 
0x75a add 
0x75b sload 
0x75c push1 0x2
0x75e dup3 
0x75f swap1 
0x760 exp 
0x761 swap1 
0x762 dup2 
0x763 and 
0x764 push1 0x0
0x766 eq 
0x767 iszero 
0x768 push2 0x774
0x76b jumpi 
0x76c push1 0x0
0x76e swap4 
0x76f pop 
0x770 push2 0x779
0x773 jump 
0x774 jumpdest 
0x775 push1 0x1
0x777 swap4 
0x778 pop 
0x779 jumpdest 
0x77a pop 
0x77b pop 
0x77c pop 
0x77d swap3 
0x77e swap2 
0x77f pop 
0x780 pop 
0x781 jump 
0x782 jumpdest 
0x783 iszero 
0x784 push2 0x5b0
0x787 jumpi 
0x788 pop 
0x789 push2 0x105
0x78c store 
0x78d jump 
0x78e jumpdest 
0x78f iszero 
0x790 push2 0x5b2
0x793 jumpi 
0x794 push1 0x0
0x796 push2 0x106
0x799 store 
0x79a pop 
0x79b jump 
0x79c jumpdest 
0x79d iszero 
0x79e push2 0x5b0
0x7a1 jumpi 
0x7a2 dup2 
0x7a3 push1 0x1
0x7a5 push1 0xa0
0x7a7 push1 0x2
0x7a9 exp 
0x7aa sub 
0x7ab and 
0x7ac selfdestruct 
0x7ad jumpdest 
0x7ae iszero 
0x7af push2 0x9c9
0x7b2 jumpi 
0x7b3 push2 0x7c1
0x7b6 dup5 
0x7b7 push1 0x0
0x7b9 push2 0xded
0x7bc caller 
0x7bd push2 0x162
0x7c0 jump 
0x7c1 jumpdest 
0x7c2 iszero 
0x7c3 push2 0x87d
0x7c6 jumpi 
0x7c7 push32 0x92ca3a80853e6663fa31fa10b99225f18d4902939b4c53a9caae9043f6efd004
0x7e8 caller 
0x7e9 dup6 
0x7ea dup8 
0x7eb dup7 
0x7ec dup7 
0x7ed push1 0x40
0x7ef mload 
0x7f0 dup1 
0x7f1 dup7 
0x7f2 push1 0x1
0x7f4 push1 0xa0
0x7f6 push1 0x2
0x7f8 exp 
0x7f9 sub 
0x7fa and 
0x7fb dup2 
0x7fc mstore 
0x7fd push1 0x20
0x7ff add 
0x800 dup6 
0x801 dup2 
0x802 mstore 
0x803 push1 0x20
0x805 add 
0x806 dup5 
0x807 push1 0x1
0x809 push1 0xa0
0x80b push1 0x2
0x80d exp 
0x80e sub 
0x80f and 
0x810 dup2 
0x811 mstore 
0x812 push1 0x20
0x814 add 
0x815 dup1 
0x816 push1 0x20
0x818 add 
0x819 dup3 
0x81a dup2 
0x81b sub 
0x81c dup3 
0x81d mstore 
0x81e dup5 
0x81f dup5 
0x820 dup3 
0x821 dup2 
0x822 dup2 
0x823 mstore 
0x824 push1 0x20
0x826 add 
0x827 swap3 
0x828 pop 
0x829 dup1 
0x82a dup3 
0x82b dup5 
0x82c calldatacopy 
0x82d dup3 
0x82e add 
0x82f swap2 
0x830 pop 
0x831 pop 
0x832 swap7 
0x833 pop 
0x834 pop 
0x835 pop 
0x836 pop 
0x837 pop 
0x838 pop 
0x839 pop 
0x83a push1 0x40
0x83c mload 
0x83d dup1 
0x83e swap2 
0x83f sub 
0x840 swap1 
0x841 log1 
0x842 dup5 
0x843 push1 0x1
0x845 push1 0xa0
0x847 push1 0x2
0x849 exp 
0x84a sub 
0x84b and 
0x84c dup5 
0x84d dup5 
0x84e dup5 
0x84f push1 0x40
0x851 mload 
0x852 dup1 
0x853 dup4 
0x854 dup4 
0x855 dup1 
0x856 dup3 
0x857 dup5 
0x858 calldatacopy 
0x859 pop 
0x85a pop 
0x85b pop 
0x85c swap1 
0x85d dup2 
0x85e add 
0x85f swap2 
0x860 pop 
0x861 push1 0x0
0x863 swap1 
0x864 dup1 
0x865 dup4 
0x866 sub 
0x867 dup2 
0x868 dup6 
0x869 dup8 
0x86a push2 0x8502
0x86d gas 
0x86e sub 
0x86f call 
0x870 pop 
0x871 push1 0x0
0x873 swap4 
0x874 pop 
0x875 push2 0x9c9
0x878 swap3 
0x879 pop 
0x87a pop 
0x87b pop 
0x87c jump 
0x87d jumpdest 
0x87e push1 0x0
0x880 calldatasize 
0x881 number 
0x882 push1 0x40
0x884 mload 
0x885 dup1 
0x886 dup5 
0x887 dup5 
0x888 dup1 
0x889 dup3 
0x88a dup5 
0x88b calldatacopy 
0x88c pop 
0x88d pop 
0x88e pop 
0x88f swap1 
0x890 swap2 
0x891 add 
0x892 swap1 
0x893 dup2 
0x894 mstore 
0x895 push1 0x40
0x897 mload 
0x898 swap1 
0x899 dup2 
0x89a swap1 
0x89b sub 
0x89c push1 0x20
0x89e add 
0x89f swap1 
0x8a0 sha3 
0x8a1 swap2 
0x8a2 pop 
0x8a3 push2 0x8ad
0x8a6 swap1 
0x8a7 pop 
0x8a8 dup2 
0x8a9 push2 0x1eb
0x8ac jump 
0x8ad jumpdest 
0x8ae iszero 
0x8af dup1 
0x8b0 iszero 
0x8b1 push2 0x8d0
0x8b4 jumpi 
0x8b5 pop 
0x8b6 push1 0x0
0x8b8 dup2 
0x8b9 dup2 
0x8ba mstore 
0x8bb push2 0x108
0x8be push1 0x20
0x8c0 mstore 
0x8c1 push1 0x40
0x8c3 dup2 
0x8c4 sha3 
0x8c5 sload 
0x8c6 push1 0x1
0x8c8 push1 0xa0
0x8ca push1 0x2
0x8cc exp 
0x8cd sub 
0x8ce and 
0x8cf eq 
0x8d0 jumpdest 
0x8d1 iszero 
0x8d2 push2 0x9c9
0x8d5 jumpi 
0x8d6 push1 0x0
0x8d8 dup2 
0x8d9 dup2 
0x8da mstore 
0x8db push2 0x108
0x8de push1 0x20
0x8e0 swap1 
0x8e1 dup2 
0x8e2 mstore 
0x8e3 push1 0x40
0x8e5 dup3 
0x8e6 sha3 
0x8e7 dup1 
0x8e8 sload 
0x8e9 push1 0x1
0x8eb push1 0xa0
0x8ed push1 0x2
0x8ef exp 
0x8f0 sub 
0x8f1 not 
0x8f2 and 
0x8f3 dup9 
0x8f4 or 
0x8f5 dup2 
0x8f6 store 
0x8f7 push1 0x1
0x8f9 dup2 
0x8fa add 
0x8fb dup8 
0x8fc swap1 
0x8fd store 
0x8fe push1 0x2
0x900 add 
0x901 dup1 
0x902 sload 
0x903 dup6 
0x904 dup3 
0x905 store 
0x906 dup2 
0x907 dup5 
0x908 mstore 
0x909 swap3 
0x90a dup3 
0x90b swap1 
0x90c sha3 
0x90d swap1 
0x90e swap3 
0x90f push1 0x1f
0x911 add 
0x912 swap2 
0x913 swap1 
0x914 swap2 
0x915 div 
0x916 dup2 
0x917 add 
0x918 swap1 
0x919 dup5 
0x91a swap1 
0x91b dup7 
0x91c dup3 
0x91d iszero 
0x91e push2 0x9d1
0x921 jumpi 
0x922 swap2 
0x923 dup3 
0x924 add 
0x925 jumpdest 
0x926 dup3 
0x927 dup2 
0x928 gt 
0x929 iszero 
0x92a push2 0x9d1
0x92d jumpi 
0x92e dup3 
0x92f calldataload 
0x930 dup3 
0x931 push1 0x0
0x933 pop 
0x934 store 
0x935 swap2 
0x936 push1 0x20
0x938 add 
0x939 swap2 
0x93a swap1 
0x93b push1 0x1
0x93d add 
0x93e swap1 
0x93f push2 0x925
0x942 jump 
0x943 jumpdest 
0x944 pop 
0x945 pop 
0x946 push32 0x1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf32
0x967 dup2 
0x968 caller 
0x969 dup7 
0x96a dup9 
0x96b dup8 
0x96c dup8 
0x96d push1 0x40
0x96f mload 
0x970 dup1 
0x971 dup8 
0x972 dup2 
0x973 mstore 
0x974 push1 0x20
0x976 add 
0x977 dup7 
0x978 push1 0x1
0x97a push1 0xa0
0x97c push1 0x2
0x97e exp 
0x97f sub 
0x980 and 
0x981 dup2 
0x982 mstore 
0x983 push1 0x20
0x985 add 
0x986 dup6 
0x987 dup2 
0x988 mstore 
0x989 push1 0x20
0x98b add 
0x98c dup5 
0x98d push1 0x1
0x98f push1 0xa0
0x991 push1 0x2
0x993 exp 
0x994 sub 
0x995 and 
0x996 dup2 
0x997 mstore 
0x998 push1 0x20
0x99a add 
0x99b dup1 
0x99c push1 0x20
0x99e add 
0x99f dup3 
0x9a0 dup2 
0x9a1 sub 
0x9a2 dup3 
0x9a3 mstore 
0x9a4 dup5 
0x9a5 dup5 
0x9a6 dup3 
0x9a7 dup2 
0x9a8 dup2 
0x9a9 mstore 
0x9aa push1 0x20
0x9ac add 
0x9ad swap3 
0x9ae pop 
0x9af dup1 
0x9b0 dup3 
0x9b1 dup5 
0x9b2 calldatacopy 
0x9b3 dup3 
0x9b4 add 
0x9b5 swap2 
0x9b6 pop 
0x9b7 pop 
0x9b8 swap8 
0x9b9 pop 
0x9ba pop 
0x9bb pop 
0x9bc pop 
0x9bd pop 
0x9be pop 
0x9bf pop 
0x9c0 pop 
0x9c1 push1 0x40
0x9c3 mload 
0x9c4 dup1 
0x9c5 swap2 
0x9c6 sub 
0x9c7 swap1 
0x9c8 log1 
0x9c9 jumpdest 
0x9ca swap5 
0x9cb swap4 
0x9cc pop 
0x9cd pop 
0x9ce pop 
0x9cf pop 
0x9d0 jump 
0x9d1 jumpdest 
0x9d2 pop 
0x9d3 push2 0x943
0x9d6 swap3 
0x9d7 swap2 
0x9d8 pop 
0x9d9 jumpdest 
0x9da dup1 
0x9db dup3 
0x9dc gt 
0x9dd iszero 
0x9de push2 0x9ed
0x9e1 jumpi 
0x9e2 push1 0x0
0x9e4 dup2 
0x9e5 store 
0x9e6 push1 0x1
0x9e8 add 
0x9e9 push2 0x9d9
0x9ec jump 
0x9ed jumpdest 
0x9ee pop 
0x9ef swap1 
0x9f0 jump 
0x9f1 jumpdest 
0x9f2 iszero 
0x9f3 push2 0xba0
0x9f6 jumpi 
0x9f7 push1 0x0
0x9f9 dup4 
0x9fa dup2 
0x9fb mstore 
0x9fc push2 0x108
0x9ff push1 0x20
0xa01 mstore 
0xa02 push1 0x40
0xa04 dup2 
0xa05 sha3 
0xa06 sload 
0xa07 push1 0x1
0xa09 push1 0xa0
0xa0b push1 0x2
0xa0d exp 
0xa0e sub 
0xa0f and 
0xa10 eq 
0xa11 push2 0xba0
0xa14 jumpi 
0xa15 push1 0x40
0xa17 dup1 
0xa18 mload 
0xa19 push1 0x0
0xa1b swap2 
0xa1c swap1 
0xa1d swap2 
0xa1e sha3 
0xa1f dup1 
0xa20 sload 
0xa21 push1 0x1
0xa23 dup3 
0xa24 add 
0xa25 sload 
0xa26 push1 0x2
0xa28 swap3 
0xa29 swap1 
0xa2a swap3 
0xa2b add 
0xa2c dup1 
0xa2d sload 
0xa2e push1 0x1
0xa30 push1 0xa0
0xa32 push1 0x2
0xa34 exp 
0xa35 sub 
0xa36 swap3 
0xa37 swap1 
0xa38 swap3 
0xa39 and 
0xa3a swap4 
0xa3b swap1 
0xa3c swap2 
0xa3d dup2 
0xa3e swap1 
0xa3f dup4 
0xa40 swap1 
0xa41 dup1 
0xa42 iszero 
0xa43 push2 0xa71
0xa46 jumpi 
0xa47 dup3 
0xa48 add 
0xa49 swap2 
0xa4a swap1 
0xa4b push1 0x0
0xa4d mstore 
0xa4e push1 0x20
0xa50 push1 0x0
0xa52 sha3 
0xa53 swap1 
0xa54 jumpdest 
0xa55 dup2 
0xa56 sload 
0xa57 dup2 
0xa58 mstore 
0xa59 swap1 
0xa5a push1 0x1
0xa5c add 
0xa5d swap1 
0xa5e push1 0x20
0xa60 add 
0xa61 dup1 
0xa62 dup4 
0xa63 gt 
0xa64 push2 0xa54
0xa67 jumpi 
0xa68 dup3 
0xa69 swap1 
0xa6a sub 
0xa6b push1 0x1f
0xa6d and 
0xa6e dup3 
0xa6f add 
0xa70 swap2 
0xa71 jumpdest 
0xa72 pop 
0xa73 pop 
0xa74 swap2 
0xa75 pop 
0xa76 pop 
0xa77 push1 0x0
0xa79 push1 0x40
0xa7b mload 
0xa7c dup1 
0xa7d dup4 
0xa7e sub 
0xa7f dup2 
0xa80 dup6 
0xa81 dup8 
0xa82 push2 0x8502
0xa85 gas 
0xa86 sub 
0xa87 call 
0xa88 pop 
0xa89 pop 
0xa8a pop 
0xa8b push1 0x0
0xa8d dup5 
0xa8e dup2 
0xa8f mstore 
0xa90 push2 0x108
0xa93 push1 0x20
0xa95 swap1 
0xa96 dup2 
0xa97 mstore 
0xa98 push1 0x40
0xa9a dup1 
0xa9b mload 
0xa9c swap3 
0xa9d dup2 
0xa9e swap1 
0xa9f sha3 
0xaa0 dup1 
0xaa1 sload 
0xaa2 push1 0x1
0xaa4 dup3 
0xaa5 add 
0xaa6 sload 
0xaa7 push1 0x1
0xaa9 push1 0xa0
0xaab push1 0x2
0xaad exp 
0xaae sub 
0xaaf caller 
0xab0 dup2 
0xab1 dup2 
0xab2 and 
0xab3 dup9 
0xab4 mstore 
0xab5 swap6 
0xab6 dup8 
0xab7 add 
0xab8 dup12 
0xab9 swap1 
0xaba mstore 
0xabb swap4 
0xabc dup7 
0xabd add 
0xabe dup2 
0xabf swap1 
0xac0 mstore 
0xac1 swap3 
0xac2 and 
0xac3 push1 0x60
0xac5 dup6 
0xac6 add 
0xac7 dup2 
0xac8 swap1 
0xac9 mstore 
0xaca push1 0xa0
0xacc push1 0x80
0xace dup7 
0xacf add 
0xad0 dup2 
0xad1 dup2 
0xad2 mstore 
0xad3 push1 0x2
0xad5 swap4 
0xad6 swap1 
0xad7 swap4 
0xad8 add 
0xad9 dup1 
0xada sload 
0xadb swap2 
0xadc dup8 
0xadd add 
0xade dup3 
0xadf swap1 
0xae0 mstore 
0xae1 push32 0xe7c957c06e9a662c1a6c77366179f5b702b97651dc28eee7d5bf1dff6e40bb4a
0xb02 swap8 
0xb03 pop 
0xb04 swap5 
0xb05 swap6 
0xb06 dup11 
0xb07 swap6 
0xb08 swap3 
0xb09 swap4 
0xb0a swap1 
0xb0b swap2 
0xb0c push1 0xc0
0xb0e dup4 
0xb0f add 
0xb10 swap1 
0xb11 dup5 
0xb12 swap1 
0xb13 dup1 
0xb14 iszero 
0xb15 push2 0xb43
0xb18 jumpi 
0xb19 dup3 
0xb1a add 
0xb1b swap2 
0xb1c swap1 
0xb1d push1 0x0
0xb1f mstore 
0xb20 push1 0x20
0xb22 push1 0x0
0xb24 sha3 
0xb25 swap1 
0xb26 jumpdest 
0xb27 dup2 
0xb28 sload 
0xb29 dup2 
0xb2a mstore 
0xb2b swap1 
0xb2c push1 0x1
0xb2e add 
0xb2f swap1 
0xb30 push1 0x20
0xb32 add 
0xb33 dup1 
0xb34 dup4 
0xb35 gt 
0xb36 push2 0xb26
0xb39 jumpi 
0xb3a dup3 
0xb3b swap1 
0xb3c sub 
0xb3d push1 0x1f
0xb3f and 
0xb40 dup3 
0xb41 add 
0xb42 swap2 
0xb43 jumpdest 
0xb44 pop 
0xb45 pop 
0xb46 swap7 
0xb47 pop 
0xb48 pop 
0xb49 pop 
0xb4a pop 
0xb4b pop 
0xb4c pop 
0xb4d pop 
0xb4e push1 0x40
0xb50 mload 
0xb51 dup1 
0xb52 swap2 
0xb53 sub 
0xb54 swap1 
0xb55 log1 
0xb56 push1 0x0
0xb58 dup4 
0xb59 dup2 
0xb5a mstore 
0xb5b push2 0x108
0xb5e push1 0x20
0xb60 swap1 
0xb61 dup2 
0xb62 mstore 
0xb63 push1 0x40
0xb65 dup3 
0xb66 sha3 
0xb67 dup1 
0xb68 sload 
0xb69 push1 0x1
0xb6b push1 0xa0
0xb6d push1 0x2
0xb6f exp 
0xb70 sub 
0xb71 not 
0xb72 and 
0xb73 dup2 
0xb74 store 
0xb75 push1 0x1
0xb77 dup2 
0xb78 add 
0xb79 dup4 
0xb7a swap1 
0xb7b store 
0xb7c push1 0x2
0xb7e dup2 
0xb7f add 
0xb80 dup1 
0xb81 sload 
0xb82 dup5 
0xb83 dup3 
0xb84 store 
0xb85 swap1 
0xb86 dup5 
0xb87 mstore 
0xb88 dup3 
0xb89 dup5 
0xb8a sha3 
0xb8b swap2 
0xb8c swap4 
0xb8d swap3 
0xb8e push2 0xba6
0xb91 swap3 
0xb92 push1 0x1f
0xb94 swap3 
0xb95 swap1 
0xb96 swap3 
0xb97 add 
0xb98 div 
0xb99 dup2 
0xb9a add 
0xb9b swap1 
0xb9c push2 0x9d9
0xb9f jump 
0xba0 jumpdest 
0xba1 pop 
0xba2 swap2 
0xba3 swap1 
0xba4 pop 
0xba5 jump 
0xba6 jumpdest 
0xba7 pop 
0xba8 pop 
0xba9 pop 
0xbaa push1 0x1
0xbac swap2 
0xbad pop 
0xbae pop 
0xbaf push2 0x17e
0xbb2 jump 
0xbb3 jumpdest 
0xbb4 push1 0x0
0xbb6 dup6 
0xbb7 dup2 
0xbb8 mstore 
0xbb9 push2 0x103
0xbbc push1 0x20
0xbbe mstore 
0xbbf push1 0x40
0xbc1 dup2 
0xbc2 sha3 
0xbc3 dup1 
0xbc4 sload 
0xbc5 swap1 
0xbc6 swap4 
0xbc7 pop 
0xbc8 eq 
0xbc9 iszero 
0xbca push2 0xc3b
0xbcd jumpi 
0xbce push1 0x0
0xbd0 dup1 
0xbd1 sload 
0xbd2 dup4 
0xbd3 store 
0xbd4 push1 0x1
0xbd6 dup4 
0xbd7 dup2 
0xbd8 add 
0xbd9 swap2 
0xbda swap1 
0xbdb swap2 
0xbdc store 
0xbdd push2 0x104
0xbe0 dup1 
0xbe1 sload 
0xbe2 swap2 
0xbe3 dup3 
0xbe4 add 
0xbe5 dup1 
0xbe6 dup3 
0xbe7 store 
0xbe8 dup3 
0xbe9 dup1 
0xbea iszero 
0xbeb dup3 
0xbec swap1 
0xbed gt 
0xbee push2 0xc0a
0xbf1 jumpi 
0xbf2 dup2 
0xbf3 dup4 
0xbf4 push1 0x0
0xbf6 mstore 
0xbf7 push1 0x20
0xbf9 push1 0x0
0xbfb sha3 
0xbfc swap2 
0xbfd dup3 
0xbfe add 
0xbff swap2 
0xc00 add 
0xc01 push2 0xc0a
0xc04 swap2 
0xc05 swap1 
0xc06 push2 0x9d9
0xc09 jump 
0xc0a jumpdest 
0xc0b pop 
0xc0c pop 
0xc0d pop 
0xc0e push1 0x2
0xc10 dup4 
0xc11 add 
0xc12 dup2 
0xc13 swap1 
0xc14 store 
0xc15 push2 0x104
0xc18 dup1 
0xc19 sload 
0xc1a dup8 
0xc1b swap3 
0xc1c swap1 
0xc1d dup2 
0xc1e lt 
0xc1f iszero 
0xc20 push2 0x2
0xc23 jumpi 
0xc24 push1 0x0
0xc26 swap2 
0xc27 swap1 
0xc28 swap2 
0xc29 mstore 
0xc2a push1 0x0
0xc2c dup1 
0xc2d mload 
0xc2e push1 0x20
0xc30 push2 0xf13
0xc33 dup4 
0xc34 codecopy 
0xc35 dup2 
0xc36 mload 
0xc37 swap2 
0xc38 mstore 
0xc39 add 
0xc3a store 
0xc3b jumpdest 
0xc3c pop 
0xc3d push1 0x1
0xc3f dup2 
0xc40 add 
0xc41 sload 
0xc42 push1 0x2
0xc44 dup4 
0xc45 swap1 
0xc46 exp 
0xc47 swap1 
0xc48 dup2 
0xc49 and 
0xc4a push1 0x0
0xc4c eq 
0xc4d iszero 
0xc4e push2 0xd0b
0xc51 jumpi 
0xc52 push1 0x40
0xc54 dup1 
0xc55 mload 
0xc56 push1 0x1
0xc58 push1 0xa0
0xc5a push1 0x2
0xc5c exp 
0xc5d sub 
0xc5e caller 
0xc5f and 
0xc60 dup2 
0xc61 mstore 
0xc62 push1 0x20
0xc64 dup2 
0xc65 add 
0xc66 dup8 
0xc67 swap1 
0xc68 mstore 
0xc69 dup2 
0xc6a mload 
0xc6b push32 0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda
0xc8c swap3 
0xc8d swap2 
0xc8e dup2 
0xc8f swap1 
0xc90 sub 
0xc91 swap1 
0xc92 swap2 
0xc93 add 
0xc94 swap1 
0xc95 log1 
0xc96 dup2 
0xc97 sload 
0xc98 push1 0x1
0xc9a swap1 
0xc9b gt 
0xc9c push2 0xcf8
0xc9f jumpi 
0xca0 push1 0x0
0xca2 dup6 
0xca3 dup2 
0xca4 mstore 
0xca5 push2 0x103
0xca8 push1 0x20
0xcaa mstore 
0xcab push1 0x40
0xcad swap1 
0xcae sha3 
0xcaf push1 0x2
0xcb1 add 
0xcb2 sload 
0xcb3 push2 0x104
0xcb6 dup1 
0xcb7 sload 
0xcb8 swap1 
0xcb9 swap2 
0xcba swap1 
0xcbb dup2 
0xcbc lt 
0xcbd iszero 
0xcbe push2 0x2
0xcc1 jumpi 
0xcc2 push1 0x40
0xcc4 push1 0x0
0xcc6 swap1 
0xcc7 dup2 
0xcc8 sha3 
0xcc9 push1 0x0
0xccb dup1 
0xccc mload 
0xccd push1 0x20
0xccf push2 0xf13
0xcd2 dup4 
0xcd3 codecopy 
0xcd4 dup2 
0xcd5 mload 
0xcd6 swap2 
0xcd7 mstore 
0xcd8 swap3 
0xcd9 swap1 
0xcda swap3 
0xcdb add 
0xcdc dup2 
0xcdd swap1 
0xcde store 
0xcdf dup1 
0xce0 dup3 
0xce1 store 
0xce2 push1 0x1
0xce4 dup3 
0xce5 dup2 
0xce6 add 
0xce7 dup3 
0xce8 swap1 
0xce9 store 
0xcea push1 0x2
0xcec swap1 
0xced swap3 
0xcee add 
0xcef store 
0xcf0 swap5 
0xcf1 pop 
0xcf2 push2 0xd0b
0xcf5 swap1 
0xcf6 pop 
0xcf7 jump 
0xcf8 jumpdest 
0xcf9 dup2 
0xcfa sload 
0xcfb push1 0x0
0xcfd not 
0xcfe add 
0xcff dup3 
0xd00 store 
0xd01 push1 0x1
0xd03 dup3 
0xd04 add 
0xd05 dup1 
0xd06 sload 
0xd07 dup3 
0xd08 or 
0xd09 swap1 
0xd0a store 
0xd0b jumpdest 
0xd0c pop 
0xd0d pop 
0xd0e pop 
0xd0f swap2 
0xd10 swap1 
0xd11 pop 
0xd12 jump 
0xd13 jumpdest 
0xd14 jumpdest 
0xd15 push1 0x1
0xd17 dup1 
0xd18 sload 
0xd19 gt 
0xd1a dup1 
0xd1b iszero 
0xd1c push2 0xd36
0xd1f jumpi 
0xd20 pop 
0xd21 push1 0x1
0xd23 sload 
0xd24 push1 0x2
0xd26 swap1 
0xd27 push2 0x100
0xd2a dup2 
0xd2b lt 
0xd2c iszero 
0xd2d push2 0x2
0xd30 jumpi 
0xd31 add 
0xd32 sload 
0xd33 push1 0x0
0xd35 eq 
0xd36 jumpdest 
0xd37 iszero 
0xd38 push2 0xd4a
0xd3b jumpi 
0xd3c push1 0x1
0xd3e dup1 
0xd3f sload 
0xd40 push1 0x0
0xd42 not 
0xd43 add 
0xd44 swap1 
0xd45 store 
0xd46 push2 0xd14
0xd49 jump 
0xd4a jumpdest 
0xd4b push1 0x1
0xd4d sload 
0xd4e dup2 
0xd4f lt 
0xd50 dup1 
0xd51 iszero 
0xd52 push2 0xd6d
0xd55 jumpi 
0xd56 pop 
0xd57 push1 0x1
0xd59 sload 
0xd5a push1 0x2
0xd5c swap1 
0xd5d push2 0x100
0xd60 dup2 
0xd61 lt 
0xd62 iszero 
0xd63 push2 0x2
0xd66 jumpi 
0xd67 add 
0xd68 sload 
0xd69 push1 0x0
0xd6b eq 
0xd6c iszero 
0xd6d jumpdest 
0xd6e dup1 
0xd6f iszero 
0xd70 push2 0xd87
0xd73 jumpi 
0xd74 pop 
0xd75 push1 0x2
0xd77 dup2 
0xd78 push2 0x100
0xd7b dup2 
0xd7c lt 
0xd7d iszero 
0xd7e push2 0x2
0xd81 jumpi 
0xd82 add 
0xd83 sload 
0xd84 push1 0x0
0xd86 eq 
0xd87 jumpdest 
0xd88 iszero 
0xd89 push2 0xde8
0xd8c jumpi 
0xd8d push1 0x1
0xd8f sload 
0xd90 push1 0x2
0xd92 swap1 
0xd93 push2 0x100
0xd96 dup2 
0xd97 lt 
0xd98 iszero 
0xd99 push2 0x2
0xd9c jumpi 
0xd9d dup2 
0xd9e add 
0xd9f sload 
0xda0 swap1 
0xda1 dup3 
0xda2 push2 0x100
0xda5 dup2 
0xda6 lt 
0xda7 iszero 
0xda8 push2 0x2
0xdab jumpi 
0xdac dup2 
0xdad add 
0xdae swap2 
0xdaf swap1 
0xdb0 swap2 
0xdb1 store 
0xdb2 dup2 
0xdb3 swap1 
0xdb4 push2 0x102
0xdb7 swap1 
0xdb8 push1 0x0
0xdba swap1 
0xdbb dup4 
0xdbc push2 0x100
0xdbf dup2 
0xdc0 lt 
0xdc1 iszero 
0xdc2 push2 0x2
0xdc5 jumpi 
0xdc6 dup2 
0xdc7 add 
0xdc8 sload 
0xdc9 dup3 
0xdca mstore 
0xdcb push1 0x20
0xdcd swap3 
0xdce swap1 
0xdcf swap3 
0xdd0 mstore 
0xdd1 push1 0x40
0xdd3 dup2 
0xdd4 sha3 
0xdd5 swap3 
0xdd6 swap1 
0xdd7 swap3 
0xdd8 store 
0xdd9 push1 0x1
0xddb sload 
0xddc push2 0x100
0xddf dup2 
0xde0 lt 
0xde1 iszero 
0xde2 push2 0x2
0xde5 jumpi 
0xde6 add 
0xde7 store 
0xde8 jumpdest 
0xde9 push2 0x605
0xdec jump 
0xded jumpdest 
0xdee iszero 
0xdef push2 0x17e
0xdf2 jumpi 
0xdf3 push2 0x107
0xdf6 sload 
0xdf7 push2 0xe03
0xdfa jumpdest 
0xdfb push3 0x15180
0xdff timestamp 
0xe00 div 
0xe01 swap1 
0xe02 jump 
0xe03 jumpdest 
0xe04 gt 
0xe05 iszero 
0xe06 push2 0xe1c
0xe09 jumpi 
0xe0a push1 0x0
0xe0c push2 0x106
0xe0f store 
0xe10 push2 0xe17
0xe13 push2 0xdfa
0xe16 jump 
0xe17 jumpdest 
0xe18 push2 0x107
0xe1b store 
0xe1c jumpdest 
0xe1d push2 0x106
0xe20 sload 
0xe21 dup1 
0xe22 dup4 
0xe23 add 
0xe24 lt 
0xe25 dup1 
0xe26 iszero 
0xe27 swap1 
0xe28 push2 0xe3a
0xe2b jumpi 
0xe2c pop 
0xe2d push2 0x106
0xe30 sload 
0xe31 push2 0x105
0xe34 sload 
0xe35 swap1 
0xe36 dup4 
0xe37 add 
0xe38 gt 
0xe39 iszero 
0xe3a jumpdest 
0xe3b iszero 
0xe3c push2 0xe50
0xe3f jumpi 
0xe40 pop 
0xe41 push2 0x106
0xe44 dup1 
0xe45 sload 
0xe46 dup3 
0xe47 add 
0xe48 swap1 
0xe49 store 
0xe4a push1 0x1
0xe4c push2 0x17e
0xe4f jump 
0xe50 jumpdest 
0xe51 pop 
0xe52 push1 0x0
0xe54 push2 0x17e
0xe57 jump 
0xe58 jumpdest 
0xe59 push2 0x5b0
0xe5c push2 0x104
0xe5f sload 
0xe60 push1 0x0
0xe62 jumpdest 
0xe63 dup2 
0xe64 dup2 
0xe65 lt 
0xe66 iszero 
0xe67 push2 0xee8
0xe6a jumpi 
0xe6b push2 0x104
0xe6e dup1 
0xe6f sload 
0xe70 dup3 
0xe71 swap1 
0xe72 dup2 
0xe73 lt 
0xe74 iszero 
0xe75 push2 0x2
0xe78 jumpi 
0xe79 push1 0x0
0xe7b swap2 
0xe7c dup3 
0xe7d mstore 
0xe7e push1 0x0
0xe80 dup1 
0xe81 mload 
0xe82 push1 0x20
0xe84 push2 0xf13
0xe87 dup4 
0xe88 codecopy 
0xe89 dup2 
0xe8a mload 
0xe8b swap2 
0xe8c mstore 
0xe8d add 
0xe8e sload 
0xe8f eq 
0xe90 push2 0xed5
0xe93 jumpi 
0xe94 push2 0x104
0xe97 dup1 
0xe98 sload 
0xe99 push2 0x103
0xe9c swap2 
0xe9d push1 0x0
0xe9f swap2 
0xea0 dup5 
0xea1 swap1 
0xea2 dup2 
0xea3 lt 
0xea4 iszero 
0xea5 push2 0x2
0xea8 jumpi 
0xea9 push1 0x0
0xeab dup1 
0xeac mload 
0xead push1 0x20
0xeaf push2 0xf13
0xeb2 dup4 
0xeb3 codecopy 
0xeb4 dup2 
0xeb5 mload 
0xeb6 swap2 
0xeb7 mstore 
0xeb8 add 
0xeb9 sload 
0xeba dup3 
0xebb mstore 
0xebc pop 
0xebd push1 0x20
0xebf swap2 
0xec0 swap1 
0xec1 swap2 
0xec2 mstore 
0xec3 push1 0x40
0xec5 dup2 
0xec6 sha3 
0xec7 dup2 
0xec8 dup2 
0xec9 store 
0xeca push1 0x1
0xecc dup2 
0xecd add 
0xece dup3 
0xecf swap1 
0xed0 store 
0xed1 push1 0x2
0xed3 add 
0xed4 store 
0xed5 jumpdest 
0xed6 push1 0x1
0xed8 add 
0xed9 push2 0xe62
0xedc jump 
0xedd jumpdest 
0xede pop 
0xedf pop 
0xee0 pop 
0xee1 push1 0x1
0xee3 add 
0xee4 push2 0x4a3
0xee7 jump 
0xee8 jumpdest 
0xee9 push2 0x104
0xeec dup1 
0xeed sload 
0xeee push1 0x0
0xef0 dup1 
0xef1 dup4 
0xef2 store 
0xef3 swap2 
0xef4 swap1 
0xef5 swap2 
0xef6 mstore 
0xef7 push2 0x451
0xefa swap1 
0xefb push1 0x0
0xefd dup1 
0xefe mload 
0xeff push1 0x20
0xf01 push2 0xf13
0xf04 dup4 
0xf05 codecopy 
0xf06 dup2 
0xf07 mload 
0xf08 swap2 
0xf09 mstore 
0xf0a swap1 
0xf0b dup2 
0xf0c add 
0xf0d swap1 
0xf0e push2 0x9d9
0xf11 jump 
0xf12 stop 
0xf13 UNKNOWN 0x4c
0xf14 signextend 
0xf15 UNKNOWN 0xe6
0xf16 mul 
0xf17 stop 
0xf18 staticcall 
0xf19 log2 
0xf1a sdiv 
0xf1b msize 
0xf1c address 
0xf1d dup13 
0xf1e UNKNOWN 0xb7
0xf1f UNKNOWN 0xb5
0xf20 log1 
0xf21 UNKNOWN 0xbb
0xf22 origin 
0xf23 store 
0xf24 UNKNOWN 0xc1
0xf25 push13 0xb1cab91f525b5ae7a03d02fabe                                                                                                                                  Panoramix ASM output

0x0 push1 0x60
0x2 push1 0x40
0x4 mstore 
0x5 calldatasize 
0x6 iszero 
0x7 push2 0xb9
0xa jumpi 
0xb push1 0xe0
0xd push1 0x2
0xf exp 
0x10 push1 0x0
0x12 calldataload 
0x13 div 
0x14 push4 0x173825d9
0x19 dup2 
0x1a eq 
0x1b push2 0x10b
0x1e jumpi 
0x1f dup1 
0x20 push4 0x2f54bf6e
0x25 eq 
0x26 push2 0x15b
0x29 jumpi 
0x2a dup1 
0x2b push4 0x4123cb6b
0x30 eq 
0x31 push2 0x183
0x34 jumpi 
0x35 dup1 
0x36 push4 0x5c52c2f5
0x3b eq 
0x3c push2 0x18c
0x3f jumpi 
0x40 dup1 
0x41 push4 0x7065cb48
0x46 eq 
0x47 push2 0x1b2
0x4a jumpi 
0x4b dup1 
0x4c push4 0x746c9171
0x51 eq 
0x52 push2 0x1db
0x55 jumpi 
0x56 dup1 
0x57 push4 0x797af627
0x5c eq 
0x5d push2 0x1e4
0x60 jumpi 
0x61 dup1 
0x62 push4 0xb20d30a9
0x67 eq 
0x68 push2 0x1f7
0x6b jumpi 
0x6c dup1 
0x6d push4 0xb61d27f6
0x72 eq 
0x73 push2 0x220
0x76 jumpi 
0x77 dup1 
0x78 push4 0xb75c7dc6
0x7d eq 
0x7e push2 0x241
0x81 jumpi 
0x82 dup1 
0x83 push4 0xba51a6df
0x88 eq 
0x89 push2 0x270
0x8c jumpi 
0x8d dup1 
0x8e push4 0xc2cf7326
0x93 eq 
0x94 push2 0x299
0x97 jumpi 
0x98 dup1 
0x99 push4 0xcbf0b0c0
0x9e eq 
0x9f push2 0x2d7
0xa2 jumpi 
0xa3 dup1 
0xa4 push4 0xf00d4b5d
0xa9 eq 
0xaa push2 0x300
0xad jumpi 
0xae dup1 
0xaf push4 0xf1736d86
0xb4 eq 
0xb5 push2 0x32e
0xb8 jumpi 
0xb9 jumpdest 
0xba push2 0x338
0xbd push1 0x0
0xbf callvalue 
0xc0 gt 
0xc1 iszero 
0xc2 push2 0x109
0xc5 jumpi 
0xc6 push1 0x40
0xc8 dup1 
0xc9 mload 
0xca push1 0x1
0xcc push1 0xa0
0xce push1 0x2
0xd0 exp 
0xd1 sub 
0xd2 caller 
0xd3 and 
0xd4 dup2 
0xd5 mstore 
0xd6 callvalue 
0xd7 push1 0x20
0xd9 dup3 
0xda add 
0xdb mstore 
0xdc dup2 
0xdd mload 
0xde push32 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c
0xff swap3 
0x100 swap2 
0x101 dup2 
0x102 swap1 
0x103 sub 
0x104 swap1 
0x105 swap2 
0x106 add 
0x107 swap1 
0x108 log1 
0x109 jumpdest 
0x10a jump 
0x10b jumpdest 
0x10c push2 0x338
0x10f push1 0x4
0x111 calldataload 
0x112 push1 0x0
0x114 push1 0x0
0x116 calldatasize 
0x117 push1 0x40
0x119 mload 
0x11a dup1 
0x11b dup4 
0x11c dup4 
0x11d dup1 
0x11e dup3 
0x11f dup5 
0x120 calldatacopy 
0x121 pop 
0x122 pop 
0x123 pop 
0x124 swap1 
0x125 dup2 
0x126 add 
0x127 dup2 
0x128 swap1 
0x129 sub 
0x12a swap1 
0x12b sha3 
0x12c swap1 
0x12d pop 
0x12e push2 0x63d
0x131 dup2 
0x132 jumpdest 
0x133 push1 0x1
0x135 push1 0xa0
0x137 push1 0x2
0x139 exp 
0x13a sub 
0x13b caller 
0x13c and 
0x13d push1 0x0
0x13f swap1 
0x140 dup2 
0x141 mstore 
0x142 push2 0x102
0x145 push1 0x20
0x147 mstore 
0x148 push1 0x40
0x14a dup2 
0x14b sha3 
0x14c sload 
0x14d dup2 
0x14e dup1 
0x14f dup3 
0x150 dup2 
0x151 eq 
0x152 iszero 
0x153 push2 0xbb3
0x156 jumpi 
0x157 push2 0xd0b
0x15a jump 
0x15b jumpdest 
0x15c push2 0x33a
0x15f push1 0x4
0x161 calldataload 
0x162 jumpdest 
0x163 push1 0x1
0x165 push1 0xa0
0x167 push1 0x2
0x169 exp 
0x16a sub 
0x16b dup2 
0x16c and 
0x16d push1 0x0
0x16f swap1 
0x170 dup2 
0x171 mstore 
0x172 push2 0x102
0x175 push1 0x20
0x177 mstore 
0x178 push1 0x40
0x17a dup2 
0x17b sha3 
0x17c sload 
0x17d gt 
0x17e jumpdest 
0x17f swap2 
0x180 swap1 
0x181 pop 
0x182 jump 
0x183 jumpdest 
0x184 push2 0x33a
0x187 push1 0x1
0x189 sload 
0x18a dup2 
0x18b jump 
0x18c jumpdest 
0x18d push2 0x338
0x190 push1 0x0
0x192 calldatasize 
0x193 push1 0x40
0x195 mload 
0x196 dup1 
0x197 dup4 
0x198 dup4 
0x199 dup1 
0x19a dup3 
0x19b dup5 
0x19c calldatacopy 
0x19d pop 
0x19e pop 
0x19f pop 
0x1a0 swap1 
0x1a1 dup2 
0x1a2 add 
0x1a3 dup2 
0x1a4 swap1 
0x1a5 sub 
0x1a6 swap1 
0x1a7 sha3 
0x1a8 swap1 
0x1a9 pop 
0x1aa push2 0x78e
0x1ad dup2 
0x1ae push2 0x132
0x1b1 jump 
0x1b2 jumpdest 
0x1b3 push2 0x338
0x1b6 push1 0x4
0x1b8 calldataload 
0x1b9 push1 0x0
0x1bb calldatasize 
0x1bc push1 0x40
0x1be mload 
0x1bf dup1 
0x1c0 dup4 
0x1c1 dup4 
0x1c2 dup1 
0x1c3 dup3 
0x1c4 dup5 
0x1c5 calldatacopy 
0x1c6 pop 
0x1c7 pop 
0x1c8 pop 
0x1c9 swap1 
0x1ca dup2 
0x1cb add 
0x1cc dup2 
0x1cd swap1 
0x1ce sub 
0x1cf swap1 
0x1d0 sha3 
0x1d1 swap1 
0x1d2 pop 
0x1d3 push2 0x5b5
0x1d6 dup2 
0x1d7 push2 0x132
0x1da jump 
0x1db jumpdest 
0x1dc push2 0x33a
0x1df push1 0x0
0x1e1 sload 
0x1e2 dup2 
0x1e3 jump 
0x1e4 jumpdest 
0x1e5 push2 0x33a
0x1e8 push1 0x4
0x1ea calldataload 
0x1eb jumpdest 
0x1ec push1 0x0
0x1ee dup2 
0x1ef push2 0x9f1
0x1f2 dup2 
0x1f3 push2 0x132
0x1f6 jump 
0x1f7 jumpdest 
0x1f8 push2 0x338
0x1fb push1 0x4
0x1fd calldataload 
0x1fe push1 0x0
0x200 calldatasize 
0x201 push1 0x40
0x203 mload 
0x204 dup1 
0x205 dup4 
0x206 dup4 
0x207 dup1 
0x208 dup3 
0x209 dup5 
0x20a calldatacopy 
0x20b pop 
0x20c pop 
0x20d pop 
0x20e swap1 
0x20f dup2 
0x210 add 
0x211 dup2 
0x212 swap1 
0x213 sub 
0x214 swap1 
0x215 sha3 
0x216 swap1 
0x217 pop 
0x218 push2 0x782
0x21b dup2 
0x21c push2 0x132
0x21f jump 
0x220 jumpdest 
0x221 push2 0x33a
0x224 push1 0x4
0x226 dup1 
0x227 calldataload 
0x228 swap1 
0x229 push1 0x24
0x22b dup1 
0x22c calldataload 
0x22d swap2 
0x22e push1 0x44
0x230 calldataload 
0x231 swap2 
0x232 dup3 
0x233 add 
0x234 swap2 
0x235 add 
0x236 calldataload 
0x237 push1 0x0
0x239 push2 0x7ad
0x23c caller 
0x23d push2 0x162
0x240 jump 
0x241 jumpdest 
0x242 push2 0x338
0x245 push1 0x4
0x247 calldataload 
0x248 push1 0x1
0x24a push1 0xa0
0x24c push1 0x2
0x24e exp 
0x24f sub 
0x250 caller 
0x251 and 
0x252 push1 0x0
0x254 swap1 
0x255 dup2 
0x256 mstore 
0x257 push2 0x102
0x25a push1 0x20
0x25c mstore 
0x25d push1 0x40
0x25f dup2 
0x260 sha3 
0x261 sload 
0x262 swap1 
0x263 dup1 
0x264 dup3 
0x265 dup2 
0x266 eq 
0x267 iszero 
0x268 push2 0x34c
0x26b jumpi 
0x26c push2 0x3cb
0x26f jump 
0x270 jumpdest 
0x271 push2 0x338
0x274 push1 0x4
0x276 calldataload 
0x277 push1 0x0
0x279 calldatasize 
0x27a push1 0x40
0x27c mload 
0x27d dup1 
0x27e dup4 
0x27f dup4 
0x280 dup1 
0x281 dup3 
0x282 dup5 
0x283 calldatacopy 
0x284 pop 
0x285 pop 
0x286 pop 
0x287 swap1 
0x288 dup2 
0x289 add 
0x28a dup2 
0x28b swap1 
0x28c sub 
0x28d swap1 
0x28e sha3 
0x28f swap1 
0x290 pop 
0x291 push2 0x6fc
0x294 dup2 
0x295 push2 0x132
0x298 jump 
0x299 jumpdest 
0x29a push2 0x33a
0x29d push1 0x4
0x29f calldataload 
0x2a0 push1 0x24
0x2a2 calldataload 
0x2a3 push1 0x0
0x2a5 dup3 
0x2a6 dup2 
0x2a7 mstore 
0x2a8 push2 0x103
0x2ab push1 0x20
0x2ad swap1 
0x2ae dup2 
0x2af mstore 
0x2b0 push1 0x40
0x2b2 dup1 
0x2b3 dup4 
0x2b4 sha3 
0x2b5 push1 0x1
0x2b7 push1 0xa0
0x2b9 push1 0x2
0x2bb exp 
0x2bc sub 
0x2bd dup6 
0x2be and 
0x2bf dup5 
0x2c0 mstore 
0x2c1 push2 0x102
0x2c4 swap1 
0x2c5 swap3 
0x2c6 mstore 
0x2c7 dup3 
0x2c8 sha3 
0x2c9 sload 
0x2ca dup3 
0x2cb dup2 
0x2cc dup2 
0x2cd eq 
0x2ce iszero 
0x2cf push2 0x755
0x2d2 jumpi 
0x2d3 push2 0x779
0x2d6 jump 
0x2d7 jumpdest 
0x2d8 push2 0x338
0x2db push1 0x4
0x2dd calldataload 
0x2de push1 0x0
0x2e0 calldatasize 
0x2e1 push1 0x40
0x2e3 mload 
0x2e4 dup1 
0x2e5 dup4 
0x2e6 dup4 
0x2e7 dup1 
0x2e8 dup3 
0x2e9 dup5 
0x2ea calldatacopy 
0x2eb pop 
0x2ec pop 
0x2ed pop 
0x2ee swap1 
0x2ef dup2 
0x2f0 add 
0x2f1 dup2 
0x2f2 swap1 
0x2f3 sub 
0x2f4 swap1 
0x2f5 sha3 
0x2f6 swap1 
0x2f7 pop 
0x2f8 push2 0x79c
0x2fb dup2 
0x2fc push2 0x132
0x2ff jump 
0x300 jumpdest 
0x301 push2 0x338
0x304 push1 0x4
0x306 calldataload 
0x307 push1 0x24
0x309 calldataload 
0x30a push1 0x0
0x30c push1 0x0
0x30e calldatasize 
0x30f push1 0x40
0x311 mload 
0x312 dup1 
0x313 dup4 
0x314 dup4 
0x315 dup1 
0x316 dup3 
0x317 dup5 
0x318 calldatacopy 
0x319 pop 
0x31a pop 
0x31b pop 
0x31c swap1 
0x31d dup2 
0x31e add 
0x31f dup2 
0x320 swap1 
0x321 sub 
0x322 swap1 
0x323 sha3 
0x324 swap1 
0x325 pop 
0x326 push2 0x456
0x329 dup2 
0x32a push2 0x132
0x32d jump 
0x32e jumpdest 
0x32f push2 0x33a
0x332 push2 0x105
0x335 sload 
0x336 dup2 
0x337 jump 
0x338 jumpdest 
0x339 stop 
0x33a jumpdest 
0x33b push1 0x40
0x33d dup1 
0x33e mload 
0x33f swap2 
0x340 dup3 
0x341 mstore 
0x342 mload 
0x343 swap1 
0x344 dup2 
0x345 swap1 
0x346 sub 
0x347 push1 0x20
0x349 add 
0x34a swap1 
0x34b return 
0x34c jumpdest 
0x34d pop 
0x34e pop 
0x34f push1 0x0
0x351 dup3 
0x352 dup2 
0x353 mstore 
0x354 push2 0x103
0x357 push1 0x20
0x359 mstore 
0x35a push1 0x40
0x35c dup2 
0x35d sha3 
0x35e push1 0x1
0x360 dup2 
0x361 add 
0x362 sload 
0x363 push1 0x2
0x365 dup5 
0x366 swap1 
0x367 exp 
0x368 swap3 
0x369 swap1 
0x36a dup4 
0x36b and 
0x36c gt 
0x36d iszero 
0x36e push2 0x3cb
0x371 jumpi 
0x372 dup1 
0x373 sload 
0x374 push1 0x1
0x376 dup3 
0x377 dup2 
0x378 add 
0x379 dup1 
0x37a sload 
0x37b swap3 
0x37c swap1 
0x37d swap2 
0x37e add 
0x37f dup4 
0x380 store 
0x381 swap1 
0x382 dup4 
0x383 swap1 
0x384 sub 
0x385 swap1 
0x386 store 
0x387 push1 0x40
0x389 dup1 
0x38a mload 
0x38b push1 0x1
0x38d push1 0xa0
0x38f push1 0x2
0x391 exp 
0x392 sub 
0x393 caller 
0x394 and 
0x395 dup2 
0x396 mstore 
0x397 push1 0x20
0x399 dup2 
0x39a add 
0x39b dup7 
0x39c swap1 
0x39d mstore 
0x39e dup2 
0x39f mload 
0x3a0 push32 0xc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b
0x3c1 swap3 
0x3c2 swap2 
0x3c3 dup2 
0x3c4 swap1 
0x3c5 sub 
0x3c6 swap1 
0x3c7 swap2 
0x3c8 add 
0x3c9 swap1 
0x3ca log1 
0x3cb jumpdest 
0x3cc pop 
0x3cd pop 
0x3ce pop 
0x3cf pop 
0x3d0 jump 
0x3d1 jumpdest 
0x3d2 push1 0x1
0x3d4 push1 0xa0
0x3d6 push1 0x2
0x3d8 exp 
0x3d9 sub 
0x3da dup4 
0x3db and 
0x3dc push1 0x2
0x3de dup4 
0x3df push2 0x100
0x3e2 dup2 
0x3e3 lt 
0x3e4 iszero 
0x3e5 push2 0x2
0x3e8 jumpi 
0x3e9 pop 
0x3ea dup4 
0x3eb add 
0x3ec dup2 
0x3ed swap1 
0x3ee store 
0x3ef push1 0x1
0x3f1 push1 0xa0
0x3f3 push1 0x2
0x3f5 exp 
0x3f6 sub 
0x3f7 dup6 
0x3f8 and 
0x3f9 push1 0x0
0x3fb dup2 
0x3fc dup2 
0x3fd mstore 
0x3fe push2 0x102
0x401 push1 0x20
0x403 swap1 
0x404 dup2 
0x405 mstore 
0x406 push1 0x40
0x408 dup1 
0x409 dup4 
0x40a sha3 
0x40b dup4 
0x40c swap1 
0x40d store 
0x40e dup5 
0x40f dup4 
0x410 mstore 
0x411 swap2 
0x412 dup3 
0x413 swap1 
0x414 sha3 
0x415 dup7 
0x416 swap1 
0x417 store 
0x418 dup2 
0x419 mload 
0x41a swap3 
0x41b dup4 
0x41c mstore 
0x41d dup3 
0x41e add 
0x41f swap3 
0x420 swap1 
0x421 swap3 
0x422 mstore 
0x423 dup2 
0x424 mload 
0x425 push32 0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c
0x446 swap3 
0x447 swap2 
0x448 dup2 
0x449 swap1 
0x44a sub 
0x44b swap1 
0x44c swap2 
0x44d add 
0x44e swap1 
0x44f log1 
0x450 pop 
0x451 jumpdest 
0x452 pop 
0x453 pop 
0x454 pop 
0x455 jump 
0x456 jumpdest 
0x457 iszero 
0x458 push2 0x3cb
0x45b jumpi 
0x45c push2 0x464
0x45f dup4 
0x460 push2 0x162
0x463 jump 
0x464 jumpdest 
0x465 iszero 
0x466 push2 0x46f
0x469 jumpi 
0x46a pop 
0x46b push2 0x451
0x46e jump 
0x46f jumpdest 
0x470 push1 0x1
0x472 push1 0xa0
0x474 push1 0x2
0x476 exp 
0x477 sub 
0x478 dup5 
0x479 and 
0x47a push1 0x0
0x47c swap1 
0x47d dup2 
0x47e mstore 
0x47f push2 0x102
0x482 push1 0x20
0x484 mstore 
0x485 push1 0x40
0x487 dup2 
0x488 sha3 
0x489 sload 
0x48a swap3 
0x48b pop 
0x48c dup3 
0x48d eq 
0x48e iszero 
0x48f push2 0x498
0x492 jumpi 
0x493 pop 
0x494 push2 0x451
0x497 jump 
0x498 jumpdest 
0x499 push2 0x3d1
0x49c jumpdest 
0x49d push2 0x104
0x4a0 sload 
0x4a1 push1 0x0
0x4a3 jumpdest 
0x4a4 dup2 
0x4a5 dup2 
0x4a6 lt 
0x4a7 iszero 
0x4a8 push2 0xe58
0x4ab jumpi 
0x4ac push2 0x104
0x4af dup1 
0x4b0 sload 
0x4b1 push2 0x108
0x4b4 swap2 
0x4b5 push1 0x0
0x4b7 swap2 
0x4b8 dup5 
0x4b9 swap1 
0x4ba dup2 
0x4bb lt 
0x4bc iszero 
0x4bd push2 0x2
0x4c0 jumpi 
0x4c1 push1 0x0
0x4c3 dup1 
0x4c4 mload 
0x4c5 push1 0x20
0x4c7 push2 0xf13
0x4ca dup4 
0x4cb codecopy 
0x4cc dup2 
0x4cd mload 
0x4ce swap2 
0x4cf mstore 
0x4d0 add 
0x4d1 sload 
0x4d2 dup3 
0x4d3 mstore 
0x4d4 pop 
0x4d5 push1 0x20
0x4d7 swap2 
0x4d8 dup3 
0x4d9 mstore 
0x4da push1 0x40
0x4dc dup2 
0x4dd sha3 
0x4de dup1 
0x4df sload 
0x4e0 push1 0x1
0x4e2 push1 0xa0
0x4e4 push1 0x2
0x4e6 exp 
0x4e7 sub 
0x4e8 not 
0x4e9 and 
0x4ea dup2 
0x4eb store 
0x4ec push1 0x1
0x4ee dup2 
0x4ef add 
0x4f0 dup3 
0x4f1 swap1 
0x4f2 store 
0x4f3 push1 0x2
0x4f5 dup2 
0x4f6 add 
0x4f7 dup1 
0x4f8 sload 
0x4f9 dup4 
0x4fa dup3 
0x4fb store 
0x4fc swap1 
0x4fd dup4 
0x4fe mstore 
0x4ff dup4 
0x500 dup4 
0x501 sha3 
0x502 swap2 
0x503 swap4 
0x504 push2 0xedd
0x507 swap3 
0x508 push1 0x1f
0x50a swap3 
0x50b swap1 
0x50c swap3 
0x50d add 
0x50e div 
0x50f dup2 
0x510 add 
0x511 swap1 
0x512 push2 0x9d9
0x515 jump 
0x516 jumpdest 
0x517 push1 0x1
0x519 dup1 
0x51a sload 
0x51b dup2 
0x51c add 
0x51d swap1 
0x51e dup2 
0x51f swap1 
0x520 store 
0x521 push1 0x1
0x523 push1 0xa0
0x525 push1 0x2
0x527 exp 
0x528 sub 
0x529 dup4 
0x52a and 
0x52b swap1 
0x52c push1 0x2
0x52e swap1 
0x52f push2 0x100
0x532 dup2 
0x533 lt 
0x534 iszero 
0x535 push2 0x2
0x538 jumpi 
0x539 swap1 
0x53a swap1 
0x53b add 
0x53c push1 0x0
0x53e pop 
0x53f dup2 
0x540 swap1 
0x541 store 
0x542 pop 
0x543 push1 0x1
0x545 push1 0x0
0x547 pop 
0x548 sload 
0x549 push2 0x102
0x54c push1 0x0
0x54e pop 
0x54f push1 0x0
0x551 dup5 
0x552 push1 0x1
0x554 push1 0xa0
0x556 push1 0x2
0x558 exp 
0x559 sub 
0x55a and 
0x55b dup2 
0x55c mstore 
0x55d push1 0x20
0x55f add 
0x560 swap1 
0x561 dup2 
0x562 mstore 
0x563 push1 0x20
0x565 add 
0x566 push1 0x0
0x568 sha3 
0x569 push1 0x0
0x56b pop 
0x56c dup2 
0x56d swap1 
0x56e store 
0x56f pop 
0x570 push32 0x994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c3
0x591 dup3 
0x592 push1 0x40
0x594 mload 
0x595 dup1 
0x596 dup3 
0x597 push1 0x1
0x599 push1 0xa0
0x59b push1 0x2
0x59d exp 
0x59e sub 
0x59f and 
0x5a0 dup2 
0x5a1 mstore 
0x5a2 push1 0x20
0x5a4 add 
0x5a5 swap2 
0x5a6 pop 
0x5a7 pop 
0x5a8 push1 0x40
0x5aa mload 
0x5ab dup1 
0x5ac swap2 
0x5ad sub 
0x5ae swap1 
0x5af log1 
0x5b0 jumpdest 
0x5b1 pop 
0x5b2 jumpdest 
0x5b3 pop 
0x5b4 jump 
0x5b5 jumpdest 
0x5b6 iszero 
0x5b7 push2 0x5b0
0x5ba jumpi 
0x5bb push2 0x5c3
0x5be dup3 
0x5bf push2 0x162
0x5c2 jump 
0x5c3 jumpdest 
0x5c4 iszero 
0x5c5 push2 0x5ce
0x5c8 jumpi 
0x5c9 pop 
0x5ca push2 0x5b2
0x5cd jump 
0x5ce jumpdest 
0x5cf push2 0x5d6
0x5d2 push2 0x49c
0x5d5 jump 
0x5d6 jumpdest 
0x5d7 push1 0x1
0x5d9 sload 
0x5da push1 0xfa
0x5dc swap1 
0x5dd lt 
0x5de push2 0x5eb
0x5e1 jumpi 
0x5e2 push2 0x5e9
0x5e5 push2 0x600
0x5e8 jump 
0x5e9 jumpdest 
0x5ea pop 
0x5eb jumpdest 
0x5ec push1 0x1
0x5ee sload 
0x5ef push1 0xfa
0x5f1 swap1 
0x5f2 lt 
0x5f3 push2 0x516
0x5f6 jumpi 
0x5f7 pop 
0x5f8 push2 0x5b2
0x5fb jump 
0x5fc jumpdest 
0x5fd push2 0x6ba
0x600 jumpdest 
0x601 push1 0x0
0x603 push1 0x1
0x605 jumpdest 
0x606 push1 0x1
0x608 sload 
0x609 dup2 
0x60a lt 
0x60b iszero 
0x60c push2 0x9ed
0x60f jumpi 
0x610 jumpdest 
0x611 push1 0x1
0x613 sload 
0x614 dup2 
0x615 lt 
0x616 dup1 
0x617 iszero 
0x618 push2 0x630
0x61b jumpi 
0x61c pop 
0x61d push1 0x2
0x61f dup2 
0x620 push2 0x100
0x623 dup2 
0x624 lt 
0x625 iszero 
0x626 push2 0x2
0x629 jumpi 
0x62a add 
0x62b sload 
0x62c push1 0x0
0x62e eq 
0x62f iszero 
0x630 jumpdest 
0x631 iszero 
0x632 push2 0xd13
0x635 jumpi 
0x636 push1 0x1
0x638 add 
0x639 push2 0x610
0x63c jump 
0x63d jumpdest 
0x63e iszero 
0x63f push2 0x451
0x642 jumpi 
0x643 push1 0x1
0x645 push1 0xa0
0x647 push1 0x2
0x649 exp 
0x64a sub 
0x64b dup4 
0x64c and 
0x64d push1 0x0
0x64f swap1 
0x650 dup2 
0x651 mstore 
0x652 push2 0x102
0x655 push1 0x20
0x657 mstore 
0x658 push1 0x40
0x65a dup2 
0x65b sha3 
0x65c sload 
0x65d swap3 
0x65e pop 
0x65f dup3 
0x660 eq 
0x661 iszero 
0x662 push2 0x66b
0x665 jumpi 
0x666 pop 
0x667 push2 0x5b0
0x66a jump 
0x66b jumpdest 
0x66c push1 0x1
0x66e push1 0x1
0x670 push1 0x0
0x672 pop 
0x673 sload 
0x674 sub 
0x675 push1 0x0
0x677 push1 0x0
0x679 pop 
0x67a sload 
0x67b gt 
0x67c iszero 
0x67d push2 0x686
0x680 jumpi 
0x681 pop 
0x682 push2 0x5b0
0x685 jump 
0x686 jumpdest 
0x687 push1 0x0
0x689 push1 0x2
0x68b dup4 
0x68c push2 0x100
0x68f dup2 
0x690 lt 
0x691 iszero 
0x692 push2 0x2
0x695 jumpi 
0x696 pop 
0x697 dup4 
0x698 add 
0x699 dup2 
0x69a swap1 
0x69b store 
0x69c push1 0x1
0x69e push1 0xa0
0x6a0 push1 0x2
0x6a2 exp 
0x6a3 sub 
0x6a4 dup5 
0x6a5 and 
0x6a6 dup2 
0x6a7 mstore 
0x6a8 push2 0x102
0x6ab push1 0x20
0x6ad mstore 
0x6ae push1 0x40
0x6b0 dup2 
0x6b1 sha3 
0x6b2 store 
0x6b3 push2 0x5fc
0x6b6 push2 0x49c
0x6b9 jump 
0x6ba jumpdest 
0x6bb pop 
0x6bc push1 0x40
0x6be dup1 
0x6bf mload 
0x6c0 push1 0x1
0x6c2 push1 0xa0
0x6c4 push1 0x2
0x6c6 exp 
0x6c7 sub 
0x6c8 dup6 
0x6c9 and 
0x6ca dup2 
0x6cb mstore 
0x6cc swap1 
0x6cd mload 
0x6ce push32 0x58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da
0x6ef swap2 
0x6f0 dup2 
0x6f1 swap1 
0x6f2 sub 
0x6f3 push1 0x20
0x6f5 add 
0x6f6 swap1 
0x6f7 log1 
0x6f8 pop 
0x6f9 pop 
0x6fa pop 
0x6fb jump 
0x6fc jumpdest 
0x6fd iszero 
0x6fe push2 0x5b0
0x701 jumpi 
0x702 push1 0x1
0x704 sload 
0x705 dup3 
0x706 gt 
0x707 iszero 
0x708 push2 0x711
0x70b jumpi 
0x70c pop 
0x70d push2 0x5b2
0x710 jump 
0x711 jumpdest 
0x712 push1 0x0
0x714 dup3 
0x715 swap1 
0x716 store 
0x717 push2 0x71e
0x71a push2 0x49c
0x71d jump 
0x71e jumpdest 
0x71f push1 0x40
0x721 dup1 
0x722 mload 
0x723 dup4 
0x724 dup2 
0x725 mstore 
0x726 swap1 
0x727 mload 
0x728 push32 0xacbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da
0x749 swap2 
0x74a dup2 
0x74b swap1 
0x74c sub 
0x74d push1 0x20
0x74f add 
0x750 swap1 
0x751 log1 
0x752 pop 
0x753 pop 
0x754 jump 
0x755 jumpdest 
0x756 pop 
0x757 push1 0x1
0x759 dup3 
0x75a add 
0x75b sload 
0x75c push1 0x2
0x75e dup3 
0x75f swap1 
0x760 exp 
0x761 swap1 
0x762 dup2 
0x763 and 
0x764 push1 0x0
0x766 eq 
0x767 iszero 
0x768 push2 0x774
0x76b jumpi 
0x76c push1 0x0
0x76e swap4 
0x76f pop 
0x770 push2 0x779
0x773 jump 
0x774 jumpdest 
0x775 push1 0x1
0x777 swap4 
0x778 pop 
0x779 jumpdest 
0x77a pop 
0x77b pop 
0x77c pop 
0x77d swap3 
0x77e swap2 
0x77f pop 
0x780 pop 
0x781 jump 
0x782 jumpdest 
0x783 iszero 
0x784 push2 0x5b0
0x787 jumpi 
0x788 pop 
0x789 push2 0x105
0x78c store 
0x78d jump 
0x78e jumpdest 
0x78f iszero 
0x790 push2 0x5b2
0x793 jumpi 
0x794 push1 0x0
0x796 push2 0x106
0x799 store 
0x79a pop 
0x79b jump 
0x79c jumpdest 
0x79d iszero 
0x79e push2 0x5b0
0x7a1 jumpi 
0x7a2 dup2 
0x7a3 push1 0x1
0x7a5 push1 0xa0
0x7a7 push1 0x2
0x7a9 exp 
0x7aa sub 
0x7ab and 
0x7ac selfdestruct 
0x7ad jumpdest 
0x7ae iszero 
0x7af push2 0x9c9
0x7b2 jumpi 
0x7b3 push2 0x7c1
0x7b6 dup5 
0x7b7 push1 0x0
0x7b9 push2 0xded
0x7bc caller 
0x7bd push2 0x162
0x7c0 jump 
0x7c1 jumpdest 
0x7c2 iszero 
0x7c3 push2 0x87d
0x7c6 jumpi 
0x7c7 push32 0x92ca3a80853e6663fa31fa10b99225f18d4902939b4c53a9caae9043f6efd004
0x7e8 caller 
0x7e9 dup6 
0x7ea dup8 
0x7eb dup7 
0x7ec dup7 
0x7ed push1 0x40
0x7ef mload 
0x7f0 dup1 
0x7f1 dup7 
0x7f2 push1 0x1
0x7f4 push1 0xa0
0x7f6 push1 0x2
0x7f8 exp 
0x7f9 sub 
0x7fa and 
0x7fb dup2 
0x7fc mstore 
0x7fd push1 0x20
0x7ff add 
0x800 dup6 
0x801 dup2 
0x802 mstore 
0x803 push1 0x20
0x805 add 
0x806 dup5 
0x807 push1 0x1
0x809 push1 0xa0
0x80b push1 0x2
0x80d exp 
0x80e sub 
0x80f and 
0x810 dup2 
0x811 mstore 
0x812 push1 0x20
0x814 add 
0x815 dup1 
0x816 push1 0x20
0x818 add 
0x819 dup3 
0x81a dup2 
0x81b sub 
0x81c dup3 
0x81d mstore 
0x81e dup5 
0x81f dup5 
0x820 dup3 
0x821 dup2 
0x822 dup2 
0x823 mstore 
0x824 push1 0x20
0x826 add 
0x827 swap3 
0x828 pop 
0x829 dup1 
0x82a dup3 
0x82b dup5 
0x82c calldatacopy 
0x82d dup3 
0x82e add 
0x82f swap2 
0x830 pop 
0x831 pop 
0x832 swap7 
0x833 pop 
0x834 pop 
0x835 pop 
0x836 pop 
0x837 pop 
0x838 pop 
0x839 pop 
0x83a push1 0x40
0x83c mload 
0x83d dup1 
0x83e swap2 
0x83f sub 
0x840 swap1 
0x841 log1 
0x842 dup5 
0x843 push1 0x1
0x845 push1 0xa0
0x847 push1 0x2
0x849 exp 
0x84a sub 
0x84b and 
0x84c dup5 
0x84d dup5 
0x84e dup5 
0x84f push1 0x40
0x851 mload 
0x852 dup1 
0x853 dup4 
0x854 dup4 
0x855 dup1 
0x856 dup3 
0x857 dup5 
0x858 calldatacopy 
0x859 pop 
0x85a pop 
0x85b pop 
0x85c swap1 
0x85d dup2 
0x85e add 
0x85f swap2 
0x860 pop 
0x861 push1 0x0
0x863 swap1 
0x864 dup1 
0x865 dup4 
0x866 sub 
0x867 dup2 
0x868 dup6 
0x869 dup8 
0x86a push2 0x8502
0x86d gas 
0x86e sub 
0x86f call 
0x870 pop 
0x871 push1 0x0
0x873 swap4 
0x874 pop 
0x875 push2 0x9c9
0x878 swap3 
0x879 pop 
0x87a pop 
0x87b pop 
0x87c jump 
0x87d jumpdest 
0x87e push1 0x0
0x880 calldatasize 
0x881 number 
0x882 push1 0x40
0x884 mload 
0x885 dup1 
0x886 dup5 
0x887 dup5 
0x888 dup1 
0x889 dup3 
0x88a dup5 
0x88b calldatacopy 
0x88c pop 
0x88d pop 
0x88e pop 
0x88f swap1 
0x890 swap2 
0x891 add 
0x892 swap1 
0x893 dup2 
0x894 mstore 
0x895 push1 0x40
0x897 mload 
0x898 swap1 
0x899 dup2 
0x89a swap1 
0x89b sub 
0x89c push1 0x20
0x89e add 
0x89f swap1 
0x8a0 sha3 
0x8a1 swap2 
0x8a2 pop 
0x8a3 push2 0x8ad
0x8a6 swap1 
0x8a7 pop 
0x8a8 dup2 
0x8a9 push2 0x1eb
0x8ac jump 
0x8ad jumpdest 
0x8ae iszero 
0x8af dup1 
0x8b0 iszero 
0x8b1 push2 0x8d0
0x8b4 jumpi 
0x8b5 pop 
0x8b6 push1 0x0
0x8b8 dup2 
0x8b9 dup2 
0x8ba mstore 
0x8bb push2 0x108
0x8be push1 0x20
0x8c0 mstore 
0x8c1 push1 0x40
0x8c3 dup2 
0x8c4 sha3 
0x8c5 sload 
0x8c6 push1 0x1
0x8c8 push1 0xa0
0x8ca push1 0x2
0x8cc exp 
0x8cd sub 
0x8ce and 
0x8cf eq 
0x8d0 jumpdest 
0x8d1 iszero 
0x8d2 push2 0x9c9
0x8d5 jumpi 
0x8d6 push1 0x0
0x8d8 dup2 
0x8d9 dup2 
0x8da mstore 
0x8db push2 0x108
0x8de push1 0x20
0x8e0 swap1 
0x8e1 dup2 
0x8e2 mstore 
0x8e3 push1 0x40
0x8e5 dup3 
0x8e6 sha3 
0x8e7 dup1 
0x8e8 sload 
0x8e9 push1 0x1
0x8eb push1 0xa0
0x8ed push1 0x2
0x8ef exp 
0x8f0 sub 
0x8f1 not 
0x8f2 and 
0x8f3 dup9 
0x8f4 or 
0x8f5 dup2 
0x8f6 store 
0x8f7 push1 0x1
0x8f9 dup2 
0x8fa add 
0x8fb dup8 
0x8fc swap1 
0x8fd store 
0x8fe push1 0x2
0x900 add 
0x901 dup1 
0x902 sload 
0x903 dup6 
0x904 dup3 
0x905 store 
0x906 dup2 
0x907 dup5 
0x908 mstore 
0x909 swap3 
0x90a dup3 
0x90b swap1 
0x90c sha3 
0x90d swap1 
0x90e swap3 
0x90f push1 0x1f
0x911 add 
0x912 swap2 
0x913 swap1 
0x914 swap2 
0x915 div 
0x916 dup2 
0x917 add 
0x918 swap1 
0x919 dup5 
0x91a swap1 
0x91b dup7 
0x91c dup3 
0x91d iszero 
0x91e push2 0x9d1
0x921 jumpi 
0x922 swap2 
0x923 dup3 
0x924 add 
0x925 jumpdest 
0x926 dup3 
0x927 dup2 
0x928 gt 
0x929 iszero 
0x92a push2 0x9d1
0x92d jumpi 
0x92e dup3 
0x92f calldataload 
0x930 dup3 
0x931 push1 0x0
0x933 pop 
0x934 store 
0x935 swap2 
0x936 push1 0x20
0x938 add 
0x939 swap2 
0x93a swap1 
0x93b push1 0x1
0x93d add 
0x93e swap1 
0x93f push2 0x925
0x942 jump 
0x943 jumpdest 
0x944 pop 
0x945 pop 
0x946 push32 0x1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf32
0x967 dup2 
0x968 caller 
0x969 dup7 
0x96a dup9 
0x96b dup8 
0x96c dup8 
0x96d push1 0x40
0x96f mload 
0x970 dup1 
0x971 dup8 
0x972 dup2 
0x973 mstore 
0x974 push1 0x20
0x976 add 
0x977 dup7 
0x978 push1 0x1
0x97a push1 0xa0
0x97c push1 0x2
0x97e exp 
0x97f sub 
0x980 and 
0x981 dup2 
0x982 mstore 
0x983 push1 0x20
0x985 add 
0x986 dup6 
0x987 dup2 
0x988 mstore 
0x989 push1 0x20
0x98b add 
0x98c dup5 
0x98d push1 0x1
0x98f push1 0xa0
0x991 push1 0x2
0x993 exp 
0x994 sub 
0x995 and 
0x996 dup2 
0x997 mstore 
0x998 push1 0x20
0x99a add 
0x99b dup1 
0x99c push1 0x20
0x99e add 
0x99f dup3 
0x9a0 dup2 
0x9a1 sub 
0x9a2 dup3 
0x9a3 mstore 
0x9a4 dup5 
0x9a5 dup5 
0x9a6 dup3 
0x9a7 dup2 
0x9a8 dup2 
0x9a9 mstore 
0x9aa push1 0x20
0x9ac add 
0x9ad swap3 
0x9ae pop 
0x9af dup1 
0x9b0 dup3 
0x9b1 dup5 
0x9b2 calldatacopy 
0x9b3 dup3 
0x9b4 add 
0x9b5 swap2 
0x9b6 pop 
0x9b7 pop 
0x9b8 swap8 
0x9b9 pop 
0x9ba pop 
0x9bb pop 
0x9bc pop 
0x9bd pop 
0x9be pop 
0x9bf pop 
0x9c0 pop 
0x9c1 push1 0x40
0x9c3 mload 
0x9c4 dup1 
0x9c5 swap2 
0x9c6 sub 
0x9c7 swap1 
0x9c8 log1 
0x9c9 jumpdest 
0x9ca swap5 
0x9cb swap4 
0x9cc pop 
0x9cd pop 
0x9ce pop 
0x9cf pop 
0x9d0 jump 
0x9d1 jumpdest 
0x9d2 pop 
0x9d3 push2 0x943
0x9d6 swap3 
0x9d7 swap2 
0x9d8 pop 
0x9d9 jumpdest 
0x9da dup1 
0x9db dup3 
0x9dc gt 
0x9dd iszero 
0x9de push2 0x9ed
0x9e1 jumpi 
0x9e2 push1 0x0
0x9e4 dup2 
0x9e5 store 
0x9e6 push1 0x1
0x9e8 add 
0x9e9 push2 0x9d9
0x9ec jump 
0x9ed jumpdest 
0x9ee pop 
0x9ef swap1 
0x9f0 jump 
0x9f1 jumpdest 
0x9f2 iszero 
0x9f3 push2 0xba0
0x9f6 jumpi 
0x9f7 push1 0x0
0x9f9 dup4 
0x9fa dup2 
0x9fb mstore 
0x9fc push2 0x108
0x9ff push1 0x20
0xa01 mstore 
0xa02 push1 0x40
0xa04 dup2 
0xa05 sha3 
0xa06 sload 
0xa07 push1 0x1
0xa09 push1 0xa0
0xa0b push1 0x2
0xa0d exp 
0xa0e sub 
0xa0f and 
0xa10 eq 
0xa11 push2 0xba0
0xa14 jumpi 
0xa15 push1 0x40
0xa17 dup1 
0xa18 mload 
0xa19 push1 0x0
0xa1b swap2 
0xa1c swap1 
0xa1d swap2 
0xa1e sha3 
0xa1f dup1 
0xa20 sload 
0xa21 push1 0x1
0xa23 dup3 
0xa24 add 
0xa25 sload 
0xa26 push1 0x2
0xa28 swap3 
0xa29 swap1 
0xa2a swap3 
0xa2b add 
0xa2c dup1 
0xa2d sload 
0xa2e push1 0x1
0xa30 push1 0xa0
0xa32 push1 0x2
0xa34 exp 
0xa35 sub 
0xa36 swap3 
0xa37 swap1 
0xa38 swap3 
0xa39 and 
0xa3a swap4 
0xa3b swap1 
0xa3c swap2 
0xa3d dup2 
0xa3e swap1 
0xa3f dup4 
0xa40 swap1 
0xa41 dup1 
0xa42 iszero 
0xa43 push2 0xa71
0xa46 jumpi 
0xa47 dup3 
0xa48 add 
0xa49 swap2 
0xa4a swap1 
0xa4b push1 0x0
0xa4d mstore 
0xa4e push1 0x20
0xa50 push1 0x0
0xa52 sha3 
0xa53 swap1 
0xa54 jumpdest 
0xa55 dup2 
0xa56 sload 
0xa57 dup2 
0xa58 mstore 
0xa59 swap1 
0xa5a push1 0x1
0xa5c add 
0xa5d swap1 
0xa5e push1 0x20
0xa60 add 
0xa61 dup1 
0xa62 dup4 
0xa63 gt 
0xa64 push2 0xa54
0xa67 jumpi 
0xa68 dup3 
0xa69 swap1 
0xa6a sub 
0xa6b push1 0x1f
0xa6d and 
0xa6e dup3 
0xa6f add 
0xa70 swap2 
0xa71 jumpdest 
0xa72 pop 
0xa73 pop 
0xa74 swap2 
0xa75 pop 
0xa76 pop 
0xa77 push1 0x0
0xa79 push1 0x40
0xa7b mload 
0xa7c dup1 
0xa7d dup4 
0xa7e sub 
0xa7f dup2 
0xa80 dup6 
0xa81 dup8 
0xa82 push2 0x8502
0xa85 gas 
0xa86 sub 
0xa87 call 
0xa88 pop 
0xa89 pop 
0xa8a pop 
0xa8b push1 0x0
0xa8d dup5 
0xa8e dup2 
0xa8f mstore 
0xa90 push2 0x108
0xa93 push1 0x20
0xa95 swap1 
0xa96 dup2 
0xa97 mstore 
0xa98 push1 0x40
0xa9a dup1 
0xa9b mload 
0xa9c swap3 
0xa9d dup2 
0xa9e swap1 
0xa9f sha3 
0xaa0 dup1 
0xaa1 sload 
0xaa2 push1 0x1
0xaa4 dup3 
0xaa5 add 
0xaa6 sload 
0xaa7 push1 0x1
0xaa9 push1 0xa0
0xaab push1 0x2
0xaad exp 
0xaae sub 
0xaaf caller 
0xab0 dup2 
0xab1 dup2 
0xab2 and 
0xab3 dup9 
0xab4 mstore 
0xab5 swap6 
0xab6 dup8 
0xab7 add 
0xab8 dup12 
0xab9 swap1 
0xaba mstore 
0xabb swap4 
0xabc dup7 
0xabd add 
0xabe dup2 
0xabf swap1 
0xac0 mstore 
0xac1 swap3 
0xac2 and 
0xac3 push1 0x60
0xac5 dup6 
0xac6 add 
0xac7 dup2 
0xac8 swap1 
0xac9 mstore 
0xaca push1 0xa0
0xacc push1 0x80
0xace dup7 
0xacf add 
0xad0 dup2 
0xad1 dup2 
0xad2 mstore 
0xad3 push1 0x2
0xad5 swap4 
0xad6 swap1 
0xad7 swap4 
0xad8 add 
0xad9 dup1 
0xada sload 
0xadb swap2 
0xadc dup8 
0xadd add 
0xade dup3 
0xadf swap1 
0xae0 mstore 
0xae1 push32 0xe7c957c06e9a662c1a6c77366179f5b702b97651dc28eee7d5bf1dff6e40bb4a
0xb02 swap8 
0xb03 pop 
0xb04 swap5 
0xb05 swap6 
0xb06 dup11 
0xb07 swap6 
0xb08 swap3 
0xb09 swap4 
0xb0a swap1 
0xb0b swap2 
0xb0c push1 0xc0
0xb0e dup4 
0xb0f add 
0xb10 swap1 
0xb11 dup5 
0xb12 swap1 
0xb13 dup1 
0xb14 iszero 
0xb15 push2 0xb43
0xb18 jumpi 
0xb19 dup3 
0xb1a add 
0xb1b swap2 
0xb1c swap1 
0xb1d push1 0x0
0xb1f mstore 
0xb20 push1 0x20
0xb22 push1 0x0
0xb24 sha3 
0xb25 swap1 
0xb26 jumpdest 
0xb27 dup2 
0xb28 sload 
0xb29 dup2 
0xb2a mstore 
0xb2b swap1 
0xb2c push1 0x1
0xb2e add 
0xb2f swap1 
0xb30 push1 0x20
0xb32 add 
0xb33 dup1 
0xb34 dup4 
0xb35 gt 
0xb36 push2 0xb26
0xb39 jumpi 
0xb3a dup3 
0xb3b swap1 
0xb3c sub 
0xb3d push1 0x1f
0xb3f and 
0xb40 dup3 
0xb41 add 
0xb42 swap2 
0xb43 jumpdest 
0xb44 pop 
0xb45 pop 
0xb46 swap7 
0xb47 pop 
0xb48 pop 
0xb49 pop 
0xb4a pop 
0xb4b pop 
0xb4c pop 
0xb4d pop 
0xb4e push1 0x40
0xb50 mload 
0xb51 dup1 
0xb52 swap2 
0xb53 sub 
0xb54 swap1 
0xb55 log1 
0xb56 push1 0x0
0xb58 dup4 
0xb59 dup2 
0xb5a mstore 
0xb5b push2 0x108
0xb5e push1 0x20
0xb60 swap1 
0xb61 dup2 
0xb62 mstore 
0xb63 push1 0x40
0xb65 dup3 
0xb66 sha3 
0xb67 dup1 
0xb68 sload 
0xb69 push1 0x1
0xb6b push1 0xa0
0xb6d push1 0x2
0xb6f exp 
0xb70 sub 
0xb71 not 
0xb72 and 
0xb73 dup2 
0xb74 store 
0xb75 push1 0x1
0xb77 dup2 
0xb78 add 
0xb79 dup4 
0xb7a swap1 
0xb7b store 
0xb7c push1 0x2
0xb7e dup2 
0xb7f add 
0xb80 dup1 
0xb81 sload 
0xb82 dup5 
0xb83 dup3 
0xb84 store 
0xb85 swap1 
0xb86 dup5 
0xb87 mstore 
0xb88 dup3 
0xb89 dup5 
0xb8a sha3 
0xb8b swap2 
0xb8c swap4 
0xb8d swap3 
0xb8e push2 0xba6
0xb91 swap3 
0xb92 push1 0x1f
0xb94 swap3 
0xb95 swap1 
0xb96 swap3 
0xb97 add 
0xb98 div 
0xb99 dup2 
0xb9a add 
0xb9b swap1 
0xb9c push2 0x9d9
0xb9f jump 
0xba0 jumpdest 
0xba1 pop 
0xba2 swap2 
0xba3 swap1 
0xba4 pop 
0xba5 jump 
0xba6 jumpdest 
0xba7 pop 
0xba8 pop 
0xba9 pop 
0xbaa push1 0x1
0xbac swap2 
0xbad pop 
0xbae pop 
0xbaf push2 0x17e
0xbb2 jump 
0xbb3 jumpdest 
0xbb4 push1 0x0
0xbb6 dup6 
0xbb7 dup2 
0xbb8 mstore 
0xbb9 push2 0x103
0xbbc push1 0x20
0xbbe mstore 
0xbbf push1 0x40
0xbc1 dup2 
0xbc2 sha3 
0xbc3 dup1 
0xbc4 sload 
0xbc5 swap1 
0xbc6 swap4 
0xbc7 pop 
0xbc8 eq 
0xbc9 iszero 
0xbca push2 0xc3b
0xbcd jumpi 
0xbce push1 0x0
0xbd0 dup1 
0xbd1 sload 
0xbd2 dup4 
0xbd3 store 
0xbd4 push1 0x1
0xbd6 dup4 
0xbd7 dup2 
0xbd8 add 
0xbd9 swap2 
0xbda swap1 
0xbdb swap2 
0xbdc store 
0xbdd push2 0x104
0xbe0 dup1 
0xbe1 sload 
0xbe2 swap2 
0xbe3 dup3 
0xbe4 add 
0xbe5 dup1 
0xbe6 dup3 
0xbe7 store 
0xbe8 dup3 
0xbe9 dup1 
0xbea iszero 
0xbeb dup3 
0xbec swap1 
0xbed gt 
0xbee push2 0xc0a
0xbf1 jumpi 
0xbf2 dup2 
0xbf3 dup4 
0xbf4 push1 0x0
0xbf6 mstore 
0xbf7 push1 0x20
0xbf9 push1 0x0
0xbfb sha3 
0xbfc swap2 
0xbfd dup3 
0xbfe add 
0xbff swap2 
0xc00 add 
0xc01 push2 0xc0a
0xc04 swap2 
0xc05 swap1 
0xc06 push2 0x9d9
0xc09 jump 
0xc0a jumpdest 
0xc0b pop 
0xc0c pop 
0xc0d pop 
0xc0e push1 0x2
0xc10 dup4 
0xc11 add 
0xc12 dup2 
0xc13 swap1 
0xc14 store 
0xc15 push2 0x104
0xc18 dup1 
0xc19 sload 
0xc1a dup8 
0xc1b swap3 
0xc1c swap1 
0xc1d dup2 
0xc1e lt 
0xc1f iszero 
0xc20 push2 0x2
0xc23 jumpi 
0xc24 push1 0x0
0xc26 swap2 
0xc27 swap1 
0xc28 swap2 
0xc29 mstore 
0xc2a push1 0x0
0xc2c dup1 
0xc2d mload 
0xc2e push1 0x20
0xc30 push2 0xf13
0xc33 dup4 
0xc34 codecopy 
0xc35 dup2 
0xc36 mload 
0xc37 swap2 
0xc38 mstore 
0xc39 add 
0xc3a store 
0xc3b jumpdest 
0xc3c pop 
0xc3d push1 0x1
0xc3f dup2 
0xc40 add 
0xc41 sload 
0xc42 push1 0x2
0xc44 dup4 
0xc45 swap1 
0xc46 exp 
0xc47 swap1 
0xc48 dup2 
0xc49 and 
0xc4a push1 0x0
0xc4c eq 
0xc4d iszero 
0xc4e push2 0xd0b
0xc51 jumpi 
0xc52 push1 0x40
0xc54 dup1 
0xc55 mload 
0xc56 push1 0x1
0xc58 push1 0xa0
0xc5a push1 0x2
0xc5c exp 
0xc5d sub 
0xc5e caller 
0xc5f and 
0xc60 dup2 
0xc61 mstore 
0xc62 push1 0x20
0xc64 dup2 
0xc65 add 
0xc66 dup8 
0xc67 swap1 
0xc68 mstore 
0xc69 dup2 
0xc6a mload 
0xc6b push32 0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda
0xc8c swap3 
0xc8d swap2 
0xc8e dup2 
0xc8f swap1 
0xc90 sub 
0xc91 swap1 
0xc92 swap2 
0xc93 add 
0xc94 swap1 
0xc95 log1 
0xc96 dup2 
0xc97 sload 
0xc98 push1 0x1
0xc9a swap1 
0xc9b gt 
0xc9c push2 0xcf8
0xc9f jumpi 
0xca0 push1 0x0
0xca2 dup6 
0xca3 dup2 
0xca4 mstore 
0xca5 push2 0x103
0xca8 push1 0x20
0xcaa mstore 
0xcab push1 0x40
0xcad swap1 
0xcae sha3 
0xcaf push1 0x2
0xcb1 add 
0xcb2 sload 
0xcb3 push2 0x104
0xcb6 dup1 
0xcb7 sload 
0xcb8 swap1 
0xcb9 swap2 
0xcba swap1 
0xcbb dup2 
0xcbc lt 
0xcbd iszero 
0xcbe push2 0x2
0xcc1 jumpi 
0xcc2 push1 0x40
0xcc4 push1 0x0
0xcc6 swap1 
0xcc7 dup2 
0xcc8 sha3 
0xcc9 push1 0x0
0xccb dup1 
0xccc mload 
0xccd push1 0x20
0xccf push2 0xf13
0xcd2 dup4 
0xcd3 codecopy 
0xcd4 dup2 
0xcd5 mload 
0xcd6 swap2 
0xcd7 mstore 
0xcd8 swap3 
0xcd9 swap1 
0xcda swap3 
0xcdb add 
0xcdc dup2 
0xcdd swap1 
0xcde store 
0xcdf dup1 
0xce0 dup3 
0xce1 store 
0xce2 push1 0x1
0xce4 dup3 
0xce5 dup2 
0xce6 add 
0xce7 dup3 
0xce8 swap1 
0xce9 store 
0xcea push1 0x2
0xcec swap1 
0xced swap3 
0xcee add 
0xcef store 
0xcf0 swap5 
0xcf1 pop 
0xcf2 push2 0xd0b
0xcf5 swap1 
0xcf6 pop 
0xcf7 jump 
0xcf8 jumpdest 
0xcf9 dup2 
0xcfa sload 
0xcfb push1 0x0
0xcfd not 
0xcfe add 
0xcff dup3 
0xd00 store 
0xd01 push1 0x1
0xd03 dup3 
0xd04 add 
0xd05 dup1 
0xd06 sload 
0xd07 dup3 
0xd08 or 
0xd09 swap1 
0xd0a store 
0xd0b jumpdest 
0xd0c pop 
0xd0d pop 
0xd0e pop 
0xd0f swap2 
0xd10 swap1 
0xd11 pop 
0xd12 jump 
0xd13 jumpdest 
0xd14 jumpdest 
0xd15 push1 0x1
0xd17 dup1 
0xd18 sload 
0xd19 gt 
0xd1a dup1 
0xd1b iszero 
0xd1c push2 0xd36
0xd1f jumpi 
0xd20 pop 
0xd21 push1 0x1
0xd23 sload 
0xd24 push1 0x2
0xd26 swap1 
0xd27 push2 0x100
0xd2a dup2 
0xd2b lt 
0xd2c iszero 
0xd2d push2 0x2
0xd30 jumpi 
0xd31 add 
0xd32 sload 
0xd33 push1 0x0
0xd35 eq 
0xd36 jumpdest 
0xd37 iszero 
0xd38 push2 0xd4a
0xd3b jumpi 
0xd3c push1 0x1
0xd3e dup1 
0xd3f sload 
0xd40 push1 0x0
0xd42 not 
0xd43 add 
0xd44 swap1 
0xd45 store 
0xd46 push2 0xd14
0xd49 jump 
0xd4a jumpdest 
0xd4b push1 0x1
0xd4d sload 
0xd4e dup2 
0xd4f lt 
0xd50 dup1 
0xd51 iszero 
0xd52 push2 0xd6d
0xd55 jumpi 
0xd56 pop 
0xd57 push1 0x1
0xd59 sload 
0xd5a push1 0x2
0xd5c swap1 
0xd5d push2 0x100
0xd60 dup2 
0xd61 lt 
0xd62 iszero 
0xd63 push2 0x2
0xd66 jumpi 
0xd67 add 
0xd68 sload 
0xd69 push1 0x0
0xd6b eq 
0xd6c iszero 
0xd6d jumpdest 
0xd6e dup1 
0xd6f iszero 
0xd70 push2 0xd87
0xd73 jumpi 
0xd74 pop 
0xd75 push1 0x2
0xd77 dup2 
0xd78 push2 0x100
0xd7b dup2 
0xd7c lt 
0xd7d iszero 
0xd7e push2 0x2
0xd81 jumpi 
0xd82 add 
0xd83 sload 
0xd84 push1 0x0
0xd86 eq 
0xd87 jumpdest 
0xd88 iszero 
0xd89 push2 0xde8
0xd8c jumpi 
0xd8d push1 0x1
0xd8f sload 
0xd90 push1 0x2
0xd92 swap1 
0xd93 push2 0x100
0xd96 dup2 
0xd97 lt 
0xd98 iszero 
0xd99 push2 0x2
0xd9c jumpi 
0xd9d dup2 
0xd9e add 
0xd9f sload 
0xda0 swap1 
0xda1 dup3 
0xda2 push2 0x100
0xda5 dup2 
0xda6 lt 
0xda7 iszero 
0xda8 push2 0x2
0xdab jumpi 
0xdac dup2 
0xdad add 
0xdae swap2 
0xdaf swap1 
0xdb0 swap2 
0xdb1 store 
0xdb2 dup2 
0xdb3 swap1 
0xdb4 push2 0x102
0xdb7 swap1 
0xdb8 push1 0x0
0xdba swap1 
0xdbb dup4 
0xdbc push2 0x100
0xdbf dup2 
0xdc0 lt 
0xdc1 iszero 
0xdc2 push2 0x2
0xdc5 jumpi 
0xdc6 dup2 
0xdc7 add 
0xdc8 sload 
0xdc9 dup3 
0xdca mstore 
0xdcb push1 0x20
0xdcd swap3 
0xdce swap1 
0xdcf swap3 
0xdd0 mstore 
0xdd1 push1 0x40
0xdd3 dup2 
0xdd4 sha3 
0xdd5 swap3 
0xdd6 swap1 
0xdd7 swap3 
0xdd8 store 
0xdd9 push1 0x1
0xddb sload 
0xddc push2 0x100
0xddf dup2 
0xde0 lt 
0xde1 iszero 
0xde2 push2 0x2
0xde5 jumpi 
0xde6 add 
0xde7 store 
0xde8 jumpdest 
0xde9 push2 0x605
0xdec jump 
0xded jumpdest 
0xdee iszero 
0xdef push2 0x17e
0xdf2 jumpi 
0xdf3 push2 0x107
0xdf6 sload 
0xdf7 push2 0xe03
0xdfa jumpdest 
0xdfb push3 0x15180
0xdff timestamp 
0xe00 div 
0xe01 swap1 
0xe02 jump 
0xe03 jumpdest 
0xe04 gt 
0xe05 iszero 
0xe06 push2 0xe1c
0xe09 jumpi 
0xe0a push1 0x0
0xe0c push2 0x106
0xe0f store 
0xe10 push2 0xe17
0xe13 push2 0xdfa
0xe16 jump 
0xe17 jumpdest 
0xe18 push2 0x107
0xe1b store 
0xe1c jumpdest 
0xe1d push2 0x106
0xe20 sload 
0xe21 dup1 
0xe22 dup4 
0xe23 add 
0xe24 lt 
0xe25 dup1 
0xe26 iszero 
0xe27 swap1 
0xe28 push2 0xe3a
0xe2b jumpi 
0xe2c pop 
0xe2d push2 0x106
0xe30 sload 
0xe31 push2 0x105
0xe34 sload 
0xe35 swap1 
0xe36 dup4 
0xe37 add 
0xe38 gt 
0xe39 iszero 
0xe3a jumpdest 
0xe3b iszero 
0xe3c push2 0xe50
0xe3f jumpi 
0xe40 pop 
0xe41 push2 0x106
0xe44 dup1 
0xe45 sload 
0xe46 dup3 
0xe47 add 
0xe48 swap1 
0xe49 store 
0xe4a push1 0x1
0xe4c push2 0x17e
0xe4f jump 
0xe50 jumpdest 
0xe51 pop 
0xe52 push1 0x0
0xe54 push2 0x17e
0xe57 jump 
0xe58 jumpdest 
0xe59 push2 0x5b0
0xe5c push2 0x104
0xe5f sload 
0xe60 push1 0x0
0xe62 jumpdest 
0xe63 dup2 
0xe64 dup2 
0xe65 lt 
0xe66 iszero 
0xe67 push2 0xee8
0xe6a jumpi 
0xe6b push2 0x104
0xe6e dup1 
0xe6f sload 
0xe70 dup3 
0xe71 swap1 
0xe72 dup2 
0xe73 lt 
0xe74 iszero 
0xe75 push2 0x2
0xe78 jumpi 
0xe79 push1 0x0
0xe7b swap2 
0xe7c dup3 
0xe7d mstore 
0xe7e push1 0x0
0xe80 dup1 
0xe81 mload 
0xe82 push1 0x20
0xe84 push2 0xf13
0xe87 dup4 
0xe88 codecopy 
0xe89 dup2 
0xe8a mload 
0xe8b swap2 
0xe8c mstore 
0xe8d add 
0xe8e sload 
0xe8f eq 
0xe90 push2 0xed5
0xe93 jumpi 
0xe94 push2 0x104
0xe97 dup1 
0xe98 sload 
0xe99 push2 0x103
0xe9c swap2 
0xe9d push1 0x0
0xe9f swap2 
0xea0 dup5 
0xea1 swap1 
0xea2 dup2 
0xea3 lt 
0xea4 iszero 
0xea5 push2 0x2
0xea8 jumpi 
0xea9 push1 0x0
0xeab dup1 
0xeac mload 
0xead push1 0x20
0xeaf push2 0xf13
0xeb2 dup4 
0xeb3 codecopy 
0xeb4 dup2 
0xeb5 mload 
0xeb6 swap2 
0xeb7 mstore 
0xeb8 add 
0xeb9 sload 
0xeba dup3 
0xebb mstore 
0xebc pop 
0xebd push1 0x20
0xebf swap2 
0xec0 swap1 
0xec1 swap2 
0xec2 mstore 
0xec3 push1 0x40
0xec5 dup2 
0xec6 sha3 
0xec7 dup2 
0xec8 dup2 
0xec9 store 
0xeca push1 0x1
0xecc dup2 
0xecd add 
0xece dup3 
0xecf swap1 
0xed0 store 
0xed1 push1 0x2
0xed3 add 
0xed4 store 
0xed5 jumpdest 
0xed6 push1 0x1
0xed8 add 
0xed9 push2 0xe62
0xedc jump 
0xedd jumpdest 
0xede pop 
0xedf pop 
0xee0 pop 
0xee1 push1 0x1
0xee3 add 
0xee4 push2 0x4a3
0xee7 jump 
0xee8 jumpdest 
0xee9 push2 0x104
0xeec dup1 
0xeed sload 
0xeee push1 0x0
0xef0 dup1 
0xef1 dup4 
0xef2 store 
0xef3 swap2 
0xef4 swap1 
0xef5 swap2 
0xef6 mstore 
0xef7 push2 0x451
0xefa swap1 
0xefb push1 0x0
0xefd dup1 
0xefe mload 
0xeff push1 0x20
0xf01 push2 0xf13
0xf04 dup4 
0xf05 codecopy 
0xf06 dup2 
0xf07 mload 
0xf08 swap2 
0xf09 mstore 
0xf0a swap1 
0xf0b dup2 
0xf0c add 
0xf0d swap1 
0xf0e push2 0x9d9
0xf11 jump 
0xf12 stop 
0xf13 UNKNOWN 0x4c
0xf14 signextend 
0xf15 UNKNOWN 0xe6
0xf16 mul 
0xf17 stop 
0xf18 staticcall 
0xf19 log2 
0xf1a sdiv 
0xf1b msize 
0xf1c address 
0xf1d dup13 
0xf1e UNKNOWN 0xb7
0xf1f UNKNOWN 0xb5
0xf20 log1 
0xf21 UNKNOWN 0xbb
0xf22 origin 
0xf23 store 
0xf24 UNKNOWN 0xc1
0xf25 push13 0xb1cab91f525b5ae7a03d02fabe



#  Eveem.org 26 Apr 2019 
#  Decompiled source of 0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe
# 
#  Let's make the world open source 
# 
#
#  I failed with these: 
#  - removeOwner(address _owner)
#  - addOwner(address _owner)
#  All the rest is below.
#

def storage:
  m_required is uint256 at storage 0
  m_numOwners is uint256 at storage 1
  stor2 is array of struct at storage 2
  stor258 is mapping of uint256 at storage 258
  stor259 is mapping of struct at storage 259
  stor260 is array of uint256 at storage 260
  m_dailyLimit is uint256 at storage 261
  stor262 is uint256 at storage 262
  stor263 is uint256 at storage 263
  stor264 is mapping of struct at storage 264

def m_numOwners() payable: 
  return m_numOwners

def m_required() payable: 
  return m_required

def m_dailyLimit() payable: 
  return m_dailyLimit


#
#  Regular functions
#


def kill(address _to) payable: 
  if stor258[caller] != 0:
      if stor259[call.data[0 len calldata.size]].field_0:
          if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
              stop
          else:
              log Confirmation(
                    address owner=caller,
                    bytes32 operation=sha3(call.data[0 len calldata.size]))
              if stor259[call.data[0 len calldata.size]].field_0 > 1:
                  stor259[call.data[0 len calldata.size]].field_0--
                  stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                  stop
              else:
                  require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                  stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                  stor259[call.data[0 len calldata.size]].field_0 = 0
                  stor259[call.data[0 len calldata.size]].field_256 = 0
                  stor259[call.data[0 len calldata.size]].field_512 = 0
                  selfdestruct(_to)
      else:
          stor259[call.data[0 len calldata.size]].field_0 = m_required
          stor259[call.data[0 len calldata.size]].field_256 = 0
          stor260.length++
          if not stor260.length > stor260.length + 1:
              stor259[call.data[0 len calldata.size]].field_512 = stor260.length
              require stor260.length < stor260.length
              stor[code.data[3859 len 32] + stor260.length] = sha3(call.data[0 len calldata.size])
              if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
                  stop
              else:
                  log Confirmation(
                        address owner=caller,
                        bytes32 operation=sha3(call.data[0 len calldata.size]))
                  if stor259[call.data[0 len calldata.size]].field_0 > 1:
                      stor259[call.data[0 len calldata.size]].field_0--
                      stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                      stop
                  else:
                      require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                      stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                      stor259[call.data[0 len calldata.size]].field_0 = 0
                      stor259[call.data[0 len calldata.size]].field_256 = 0
                      stor259[call.data[0 len calldata.size]].field_512 = 0
                      selfdestruct(_to)
          else:
              idx = stor260.length + 1
              while stor260.length > idx:
                  stor260[idx] = 0
                  idx = idx + 1
                  continue 
              stor259[call.data[0 len calldata.size]].field_512 = stor260.length
              require stor260.length < stor260.length
              stor[code.data[3859 len 32] + stor260.length] = sha3(call.data[0 len calldata.size])
              if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
                  stop
              else:
                  log Confirmation(
                        address owner=caller,
                        bytes32 operation=sha3(call.data[0 len calldata.size]))
                  if stor259[call.data[0 len calldata.size]].field_0 > 1:
                      stor259[call.data[0 len calldata.size]].field_0--
                      stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                      stop
                  else:
                      require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                      stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                      stor259[call.data[0 len calldata.size]].field_0 = 0
                      stor259[call.data[0 len calldata.size]].field_256 = 0
                      stor259[call.data[0 len calldata.size]].field_512 = 0
                      selfdestruct(_to)
  else:
      stop


def isOwner(address _owner) payable: 
  return (stor258[addr(_owner)] > 0)


def _fallback() payable: # default function
  if call.value > 0:
      log Deposit(
            address sender=caller,
            uint256 value=call.value)


def hasConfirmed(bytes32 _operation, address _owner) payable: 
  if stor258[addr(_owner)] != 0:
      if 2^stor258[addr(_owner)] and stor259[_operation].field_256 != 0:
          return 1
      else:
          return 0
  else:
      return 0


def revoke(bytes32 _operation) payable: 
  if stor258[caller] != 0:
      if 2^stor258[caller] and stor259[_operation].field_256 > 0:
          stor259[_operation].field_0++
          stor259[_operation].field_256 -= 2^stor258[caller]
          log Revoke(
                address owner=caller,
                bytes32 operation=_operation)


def resetSpentToday() payable: 
  if stor258[caller] != 0:
      if stor259[call.data[0 len calldata.size]].field_0:
          if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
              stop
          else:
              log Confirmation(
                    address owner=caller,
                    bytes32 operation=sha3(call.data[0 len calldata.size]))
              if stor259[call.data[0 len calldata.size]].field_0 > 1:
                  stor259[call.data[0 len calldata.size]].field_0--
                  stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                  stop
              else:
                  require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                  stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                  stor259[call.data[0 len calldata.size]].field_0 = 0
                  stor259[call.data[0 len calldata.size]].field_256 = 0
                  stor259[call.data[0 len calldata.size]].field_512 = 0
                  stor262 = 0
                  stop
      else:
          stor259[call.data[0 len calldata.size]].field_0 = m_required
          stor259[call.data[0 len calldata.size]].field_256 = 0
          stor260.length++
          if not stor260.length > stor260.length + 1:
              stor259[call.data[0 len calldata.size]].field_512 = stor260.length
              require stor260.length < stor260.length
              stor[code.data[3859 len 32] + stor260.length] = sha3(call.data[0 len calldata.size])
              if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
                  stop
              else:
                  log Confirmation(
                        address owner=caller,
                        bytes32 operation=sha3(call.data[0 len calldata.size]))
                  if stor259[call.data[0 len calldata.size]].field_0 > 1:
                      stor259[call.data[0 len calldata.size]].field_0--
                      stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                      stop
                  else:
                      require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                      stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                      stor259[call.data[0 len calldata.size]].field_0 = 0
                      stor259[call.data[0 len calldata.size]].field_256 = 0
                      stor259[call.data[0 len calldata.size]].field_512 = 0
                      stor262 = 0
                      stop
          else:
              idx = stor260.length + 1
              while stor260.length > idx:
                  stor260[idx] = 0
                  idx = idx + 1
                  continue 
              stor259[call.data[0 len calldata.size]].field_512 = stor260.length
              require stor260.length < stor260.length
              stor[code.data[3859 len 32] + stor260.length] = sha3(call.data[0 len calldata.size])
              if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
                  stop
              else:
                  log Confirmation(
                        address owner=caller,
                        bytes32 operation=sha3(call.data[0 len calldata.size]))
                  if stor259[call.data[0 len calldata.size]].field_0 > 1:
                      stor259[call.data[0 len calldata.size]].field_0--
                      stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                      stop
                  else:
                      require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                      stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                      stor259[call.data[0 len calldata.size]].field_0 = 0
                      stor259[call.data[0 len calldata.size]].field_256 = 0
                      stor259[call.data[0 len calldata.size]].field_512 = 0
                      stor262 = 0
                      stop
  else:
      stop


def setDailyLimit(uint256 _newLimit) payable: 
  if stor258[caller] != 0:
      if stor259[call.data[0 len calldata.size]].field_0:
          if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
              stop
          else:
              log Confirmation(
                    address owner=caller,
                    bytes32 operation=sha3(call.data[0 len calldata.size]))
              if stor259[call.data[0 len calldata.size]].field_0 > 1:
                  stor259[call.data[0 len calldata.size]].field_0--
                  stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                  stop
              else:
                  require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                  stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                  stor259[call.data[0 len calldata.size]].field_0 = 0
                  stor259[call.data[0 len calldata.size]].field_256 = 0
                  stor259[call.data[0 len calldata.size]].field_512 = 0
                  m_dailyLimit = _newLimit
                  stop
      else:
          stor259[call.data[0 len calldata.size]].field_0 = m_required
          stor259[call.data[0 len calldata.size]].field_256 = 0
          stor260.length++
          if not stor260.length > stor260.length + 1:
              stor259[call.data[0 len calldata.size]].field_512 = stor260.length
              require stor260.length < stor260.length
              stor[code.data[3859 len 32] + stor260.length] = sha3(call.data[0 len calldata.size])
              if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
                  stop
              else:
                  log Confirmation(
                        address owner=caller,
                        bytes32 operation=sha3(call.data[0 len calldata.size]))
                  if stor259[call.data[0 len calldata.size]].field_0 > 1:
                      stor259[call.data[0 len calldata.size]].field_0--
                      stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                      stop
                  else:
                      require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                      stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                      stor259[call.data[0 len calldata.size]].field_0 = 0
                      stor259[call.data[0 len calldata.size]].field_256 = 0
                      stor259[call.data[0 len calldata.size]].field_512 = 0
                      m_dailyLimit = _newLimit
                      stop
          else:
              idx = stor260.length + 1
              while stor260.length > idx:
                  stor260[idx] = 0
                  idx = idx + 1
                  continue 
              stor259[call.data[0 len calldata.size]].field_512 = stor260.length
              require stor260.length < stor260.length
              stor[code.data[3859 len 32] + stor260.length] = sha3(call.data[0 len calldata.size])
              if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
                  stop
              else:
                  log Confirmation(
                        address owner=caller,
                        bytes32 operation=sha3(call.data[0 len calldata.size]))
                  if stor259[call.data[0 len calldata.size]].field_0 > 1:
                      stor259[call.data[0 len calldata.size]].field_0--
                      stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                      stop
                  else:
                      require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                      stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                      stor259[call.data[0 len calldata.size]].field_0 = 0
                      stor259[call.data[0 len calldata.size]].field_256 = 0
                      stor259[call.data[0 len calldata.size]].field_512 = 0
                      m_dailyLimit = _newLimit
                      stop
  else:
      stop


def changeRequirement(uint256 _newRequired) payable: 
  if stor258[caller] != 0:
      if stor259[call.data[0 len calldata.size]].field_0:
          if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
              stop
          else:
              log Confirmation(
                    address owner=caller,
                    bytes32 operation=sha3(call.data[0 len calldata.size]))
              if stor259[call.data[0 len calldata.size]].field_0 > 1:
                  stor259[call.data[0 len calldata.size]].field_0--
                  stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                  stop
              else:
                  require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                  stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                  stor259[call.data[0 len calldata.size]].field_0 = 0
                  stor259[call.data[0 len calldata.size]].field_256 = 0
                  stor259[call.data[0 len calldata.size]].field_512 = 0
                  if _newRequired <= m_numOwners:
                      m_required = _newRequired
                      idx = 0
                      while idx < stor260.length:
                          mem[32] = 264
                          addr(stor264[stor[code.data[3859 len 32] + idx]].field_0) = 0
                          stor264[stor[code.data[3859 len 32] + idx]].field_256 = 0
                          stor264[stor[code.data[3859 len 32] + idx]].field_512 = 0
                          mem[0] = sha3(stor[code.data[3859 len 32] + idx], 264) + 2
                          s = sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2)
                          while sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2) + (stor264[stor[code.data[3859 len 32] + s]].field_512 + 31 / 32) > s:
                              stor[s] = 0
                              s = s + 1
                              continue 
                          s = sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2) + (stor264[stor[code.data[3859 len 32] + s]].field_512 + 31 / 32) + 1
                          continue 
                      idx = 0
                      while idx < stor260.length:
                          mem[0] = 260
                          if not stor[code.data[3859 len 32] + idx]:
                              idx = idx + 1
                              continue 
                          else:
                              require idx < stor260.length
                              mem[0] = stor[code.data[3859 len 32] + idx]
                              mem[32] = 259
                              stor259[stor[code.data[3859 len 32] + idx]].field_0 = 0
                              stor259[stor[code.data[3859 len 32] + idx]].field_256 = 0
                              stor259[stor[code.data[3859 len 32] + idx]].field_512 = 0
                              idx = idx + 1
                              continue 
                      stor260.length = 0
                      idx = code.data[3859 len 32]
                      while code.data[3859 len 32] + stor260.length > idx:
                          stor[idx] = 0
                          idx = idx + 1
                          continue 
                      log RequirementChanged(uint256 newRequirement=_newRequired)
                      stop
                  else:
                      stop
      else:
          stor259[call.data[0 len calldata.size]].field_0 = m_required
          stor259[call.data[0 len calldata.size]].field_256 = 0
          stor260.length++
          if not stor260.length > stor260.length + 1:
              stor259[call.data[0 len calldata.size]].field_512 = stor260.length
              require stor260.length < stor260.length
              stor[code.data[3859 len 32] + stor260.length] = sha3(call.data[0 len calldata.size])
              if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
                  stop
              else:
                  log Confirmation(
                        address owner=caller,
                        bytes32 operation=sha3(call.data[0 len calldata.size]))
                  if stor259[call.data[0 len calldata.size]].field_0 > 1:
                      stor259[call.data[0 len calldata.size]].field_0--
                      stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                      stop
                  else:
                      require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                      stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                      stor259[call.data[0 len calldata.size]].field_0 = 0
                      stor259[call.data[0 len calldata.size]].field_256 = 0
                      stor259[call.data[0 len calldata.size]].field_512 = 0
                      if _newRequired <= m_numOwners:
                          m_required = _newRequired
                          idx = 0
                          while idx < stor260.length:
                              mem[32] = 264
                              addr(stor264[stor[code.data[3859 len 32] + idx]].field_0) = 0
                              stor264[stor[code.data[3859 len 32] + idx]].field_256 = 0
                              stor264[stor[code.data[3859 len 32] + idx]].field_512 = 0
                              mem[0] = sha3(stor[code.data[3859 len 32] + idx], 264) + 2
                              s = sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2)
                              while sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2) + (stor264[stor[code.data[3859 len 32] + s]].field_512 + 31 / 32) > s:
                                  stor[s] = 0
                                  s = s + 1
                                  continue 
                              s = sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2) + (stor264[stor[code.data[3859 len 32] + s]].field_512 + 31 / 32) + 1
                              continue 
                          idx = 0
                          while idx < stor260.length:
                              mem[0] = 260
                              if not stor[code.data[3859 len 32] + idx]:
                                  idx = idx + 1
                                  continue 
                              else:
                                  require idx < stor260.length
                                  mem[0] = stor[code.data[3859 len 32] + idx]
                                  mem[32] = 259
                                  stor259[stor[code.data[3859 len 32] + idx]].field_0 = 0
                                  stor259[stor[code.data[3859 len 32] + idx]].field_256 = 0
                                  stor259[stor[code.data[3859 len 32] + idx]].field_512 = 0
                                  idx = idx + 1
                                  continue 
                          stor260.length = 0
                          idx = code.data[3859 len 32]
                          while code.data[3859 len 32] + stor260.length > idx:
                              stor[idx] = 0
                              idx = idx + 1
                              continue 
                          log RequirementChanged(uint256 newRequirement=_newRequired)
                          stop
                      else:
                          stop
          else:
              idx = stor260.length + 1
              while stor260.length > idx:
                  stor260[idx] = 0
                  idx = idx + 1
                  continue 
              stor259[call.data[0 len calldata.size]].field_512 = stor260.length
              require stor260.length < stor260.length
              stor[code.data[3859 len 32] + stor260.length] = sha3(call.data[0 len calldata.size])
              if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
                  stop
              else:
                  log Confirmation(
                        address owner=caller,
                        bytes32 operation=sha3(call.data[0 len calldata.size]))
                  if stor259[call.data[0 len calldata.size]].field_0 > 1:
                      stor259[call.data[0 len calldata.size]].field_0--
                      stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                      stop
                  else:
                      require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                      stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                      stor259[call.data[0 len calldata.size]].field_0 = 0
                      stor259[call.data[0 len calldata.size]].field_256 = 0
                      stor259[call.data[0 len calldata.size]].field_512 = 0
                      if _newRequired <= m_numOwners:
                          m_required = _newRequired
                          idx = 0
                          while idx < stor260.length:
                              mem[32] = 264
                              addr(stor264[stor[code.data[3859 len 32] + idx]].field_0) = 0
                              stor264[stor[code.data[3859 len 32] + idx]].field_256 = 0
                              stor264[stor[code.data[3859 len 32] + idx]].field_512 = 0
                              mem[0] = sha3(stor[code.data[3859 len 32] + idx], 264) + 2
                              s = sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2)
                              while sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2) + (stor264[stor[code.data[3859 len 32] + s]].field_512 + 31 / 32) > s:
                                  stor[s] = 0
                                  s = s + 1
                                  continue 
                              s = sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2) + (stor264[stor[code.data[3859 len 32] + s]].field_512 + 31 / 32) + 1
                              continue 
                          idx = 0
                          while idx < stor260.length:
                              mem[0] = 260
                              if not stor[code.data[3859 len 32] + idx]:
                                  idx = idx + 1
                                  continue 
                              else:
                                  require idx < stor260.length
                                  mem[0] = stor[code.data[3859 len 32] + idx]
                                  mem[32] = 259
                                  stor259[stor[code.data[3859 len 32] + idx]].field_0 = 0
                                  stor259[stor[code.data[3859 len 32] + idx]].field_256 = 0
                                  stor259[stor[code.data[3859 len 32] + idx]].field_512 = 0
                                  idx = idx + 1
                                  continue 
                          stor260.length = 0
                          idx = code.data[3859 len 32]
                          while code.data[3859 len 32] + stor260.length > idx:
                              stor[idx] = 0
                              idx = idx + 1
                              continue 
                          log RequirementChanged(uint256 newRequirement=_newRequired)
                          stop
                      else:
                          stop
  else:
      stop


def changeOwner(address _from, address _to) payable: 
  if stor258[caller] != 0:
      if stor259[call.data[0 len calldata.size]].field_0:
          if 2^stor258[caller] and stor259[call.data[0 len calldata.size]].field_256 != 0:
              stop
          else:
              log Confirmation(
                    address owner=caller,
                    bytes32 operation=sha3(call.data[0 len calldata.size]))
              if stor259[call.data[0 len calldata.size]].field_0 > 1:
                  stor259[call.data[0 len calldata.size]].field_0--
                  stor259[call.data[0 len calldata.size]].field_256 = 2^stor258[caller] or stor259[call.data[0 len calldata.size]].field_256
                  stop
              else:
                  require stor259[call.data[0 len calldata.size]].field_512 < stor260.length
                  stor[code.data[3859 len 32] + stor259[call.data[0 len calldata.size]].field_512] = 0
                  stor259[call.data[0 len calldata.size]].field_0 = 0
                  stor259[call.data[0 len calldata.size]].field_256 = 0
                  stor259[call.data[0 len calldata.size]].field_512 = 0
                  if stor258[addr(_to)] <= 0:
                      if stor258[addr(_from)]:
                          idx = 0
                          while idx < stor260.length:
                              mem[32] = 264
                              addr(stor264[stor[code.data[3859 len 32] + idx]].field_0) = 0
                              stor264[stor[code.data[3859 len 32] + idx]].field_256 = 0
                              stor264[stor[code.data[3859 len 32] + idx]].field_512 = 0
                              mem[0] = sha3(stor[code.data[3859 len 32] + idx], 264) + 2
                              s = sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2)
                              while sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2) + (stor264[stor[code.data[3859 len 32] + s]].field_512 + 31 / 32) > s:
                                  stor[s] = 0
                                  s = s + 1
                                  continue 
                              s = sha3(sha3(stor[code.data[3859 len 32] + s], 264) + 2) + (stor264[stor[code.data[3859 len 32] + s]].field_512 + 31 / 32) + 1
                              continue 
                          idx = 0
                          while idx < stor260.length:
                              mem[0] = 260
                              if not stor[code.data[3859 len 32] + idx]:
                                  idx = idx + 1
                                  continue 
                              else:
                                  require idx < stor260.length
                                  mem[0] = stor[code.data[3859 len 32] + idx]
                                  mem[32] = 259
                                  stor259[stor[code.data[3859 len 32] + idx]].field_0 = 0
                                  stor259[stor[code.data[3859 len 32] + idx]].field_256 = 0
                                  stor259[stor[code.data[3859 len 32] + idx]].field_512 = 0
                                  idx = idx + 1
                                  continue 
                          stor260.length = 0
                          idx = code.data[3859 len 32]
                          while code.data[3859 len 32] + stor260.length > idx:
                              stor[idx] = 0
                              idx = idx + 1
                              continue 
                          require stor258[addr(_from)] < 256
                          addr(stor2[stor258[addr(_from)]].field_0) = _to
                          Mask(96, 0, stor2[stor258[addr(_from)]].field_160) = 0
                          stor258[addr(_from)] = 0
                          stor258[_to] = stor258[addr(_from)]
                          log OwnerChanged(
                                address oldOwner=addr(_from),
                                address newOwner=_to)
                          stop
                      else:
                          stop
                                 ,,    
Contract data

addr: 0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe
network: mainnet

Balance:  597623.370144773 Ether

# read-only functions
  m_numOwners() == 7
  m_required() == 4
  m_dailyLimit() == 0x3635c9adc5dea00000

# storage 256, 0, 0
  m_required: 4

# storage 256, 0, 1
  m_numOwners: 7

# storage 256, 0, 261
  m_dailyLimit: 0x3635c9adc5dea00000